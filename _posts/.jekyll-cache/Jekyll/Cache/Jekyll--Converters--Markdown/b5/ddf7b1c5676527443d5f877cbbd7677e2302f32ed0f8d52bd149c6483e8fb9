I"¶7<p>Yo! This is my boot2root writeup for <strong>Aqua</strong> vm. For those who didn‚Äôt manage to play with it yet, download the <a href="#">vm</a> and come back when you have finished or when you are stuck.</p>

<p>or‚Ä¶, if you want to play with an easier vm, check this <a href="https://www.vulnhub.com/entry/nezuko-1,352/">out</a>.</p>

<h1 id="about-aqua-vm">About Aqua VM</h1>

<p>Name : Aqua</p>

<p>Difficulty : Intermediate to hard</p>

<h2 id="enumeration">Enumeration</h2>

<p>In this case, the <strong>IP</strong> for the target machine is <code class="language-plaintext highlighter-rouge">10.0.2.6</code>.</p>

<p>These are the following open ports.</p>

<p><img src="/musubi/assets/aqua/1.png" alt="1" /></p>

<p>When going through the webpage, we found this page.</p>

<p><img src="/musubi/assets/aqua/2.png" alt="2" /></p>

<p>When clicking the <strong>‚ÄúSure, I‚Äôll help‚Äù</strong>
button, we are redirected to another page which shows a potential credential.</p>

<p><img src="/musubi/assets/aqua/3.png" alt="3" /></p>

<p><code class="language-plaintext highlighter-rouge">megumin:watashiwamegumin</code></p>

<p>When running <strong>nikto</strong> on the target we found <strong>login.php</strong>.</p>

<p><img src="/musubi/assets/aqua/4.png" alt="4" /></p>

<h3 id="loginphp">Login.php</h3>

<p><img src="/musubi/assets/aqua/4.2.png" alt="4.2" /></p>

<p>Using the credential found, we managed to log in.</p>

<p><img src="/musubi/assets/aqua/5.png" alt="5" /></p>

<p>The <strong>url</strong> is vulnerable to <strong>LFI(local file inclusion)</strong> as seen below.</p>

<p><img src="/musubi/assets/aqua/6.png" alt="6" /></p>

<h2 id="exploitation">Exploitation</h2>

<p>Upon further enumeration, we found that the port 21 can be opened by using port knocking. It was filtered when nmap result showed up. The knockd config file can be found at <code class="language-plaintext highlighter-rouge">/etc/knockd.conf</code> in the target machine.</p>

<p><img src="/musubi/assets/aqua/7.png" alt="7" /></p>

<p>Image below shows the result before and after port knocking.</p>

<p><img src="/musubi/assets/aqua/8.png" alt="8" /></p>

<p>Using the same credential , we managed to login into the <strong>FTP</strong> service.</p>

<p>The content of <strong>hello.php</strong> is the same as in the index page of <strong>Megumin</strong> secret diary we saw last time. This means that if we put our <strong>php reverse shell</strong> payload in this directory, we can get a shell by browsing through the page using <strong>LFI</strong> vulnerability found earlier.</p>

<p><img src="/musubi/assets/aqua/9.png" alt="9" /></p>

<p><img src="/musubi/assets/aqua/9.1.png" alt="9.1" /></p>

<p>The directory <strong>‚Äúproduction/‚Äù</strong> is writable so we will put our reverse shell in there.</p>

<p><img src="/musubi/assets/aqua/10.png" alt="10" /></p>

<p>The file <code class="language-plaintext highlighter-rouge">notes</code> revealed the absolute path of the current directory.</p>

<p><img src="/musubi/assets/aqua/11.png" alt="11" /></p>

<p>This means that, by going to <code class="language-plaintext highlighter-rouge">http://10.0.2.6/home.php?showcase=../deployment/production/ourreverseshell.php</code> , our payload will be executed.</p>

<p><img src="/musubi/assets/aqua/12.png" alt="12" /></p>

<h2 id="privilege-escalation-i">Privilege escalation I</h2>

<p>Upon reading <code class="language-plaintext highlighter-rouge">/etc/sudoers</code> file, we found out that these users can run commands using <strong>sudo</strong> privileges without password.</p>

<p><strong>Aqua : /root/quotes, /root/esp, /usr/bin/gdb</strong></p>

<p><strong>Megumin : /home/aqua/Desktop/backdoor</strong></p>

<p>Using the same credential, we managed to login as <strong>megumin</strong>.</p>

<p><img src="/musubi/assets/aqua/13.png" alt="13" /></p>

<h2 id="privilege-escalation-ii">Privilege escalation II</h2>

<p>And as megumin, we can run <code class="language-plaintext highlighter-rouge">/home/aqua/Desktop/backdoor</code> using sudo privilege.</p>

<p><img src="/musubi/assets/aqua/14.png" alt="14" /></p>

<p>When rerunning nmap on the target, we found that port <strong>1337</strong> is open.</p>

<p><img src="/musubi/assets/aqua/15.png" alt="15" /></p>

<p>We then try to connect to the port using netcat and get a shell.</p>

<p><img src="/musubi/assets/aqua/16.png" alt="16" /></p>

<h2 id="privilege-escalation-iii---easier-method">Privilege escalation III - Easier method</h2>

<p>As aqua we can run gdb with sudo privilege without using the password.</p>

<p><img src="/musubi/assets/aqua/17.png" alt="17" /></p>

<p>We can get a root shell using gdb by following command.</p>

<p><code class="language-plaintext highlighter-rouge">sudo gdb -nx -ex '!sh' -ex quit</code></p>

<p><img src="/musubi/assets/aqua/18.png" alt="18" /></p>

<h2 id="privilege-escalation-iii---without-using-usrbingdb">Privilege escalation III - Without using /usr/bin/gdb</h2>

<p>For your information, this is my intended path of getting to root shell. But as I want to give a great experience to everyone including those who didn‚Äôt know about buffer overflow on Linux, so I have decided to make an easier method to get into root.</p>

<p>By running <code class="language-plaintext highlighter-rouge">sudo /root/quotes</code>, we know that the binary will print out our name and generate a random quote for us.</p>

<p><img src="/musubi/assets/aqua/21.png" alt="21" /></p>

<p>In aqua home directory, we can get the source code for <code class="language-plaintext highlighter-rouge">/root/quotes</code> and <code class="language-plaintext highlighter-rouge">/root/esp</code> binaries which is located at this <a href="https://github.com/yunaranyancat/personal_projects/tree/master/project_9">link</a>.</p>

<p><img src="/musubi/assets/aqua/19.png" alt="19" /></p>

<p>We also know that <code class="language-plaintext highlighter-rouge">/root/esp</code> shows the address of the <strong>ESP</strong> of the machine and that the <strong>ASLR</strong> is not enabled.</p>

<p><img src="/musubi/assets/aqua/20.png" alt="20" /></p>

<p>Based on the source code, the possible vulnerable part is at the <strong>getname</strong> method which uses <strong>strcpy</strong>. If we put a name longer than the size of the buffer, this can corrupt the memory thus can be exploited to gain a shell via buffer overflow vulnerability.</p>

<p><img src="/musubi/assets/aqua/22.png" alt="22" /></p>

<p>By knowing the environment of the target, we will make a debugging machine which is the exact copy of the target OS.</p>

<p><img src="/musubi/assets/aqua/23.png" alt="23" /></p>

<p>It seems like the target OS is using <strong>Linux Lite 3.8 32 bits</strong>.</p>

<p><img src="/musubi/assets/aqua/lite.png" alt="lite" /></p>

<p>To mimic the situation of the target machine, we will download the source code for <strong>quotes.c</strong> and <strong>esp.c</strong> as root then debug it using non root user.</p>

<p><img src="/musubi/assets/aqua/24.png" alt="24" /></p>

<p>By default, <strong>ASLR</strong> is enabled. To disable <strong>ASLR</strong>, run the following command.</p>

<p><code class="language-plaintext highlighter-rouge">echo 0 | sudo tee /proc/sys/kernel/randomize_va_space</code></p>

<p><img src="/musubi/assets/aqua/25.png" alt="25" /></p>

<p>Then compile the binaries using following options.</p>

<p>esp.c : <code class="language-plaintext highlighter-rouge">gcc -fno-stack-protector -z execstack -no-pie esp.c -o esp</code></p>

<p>quotes.c ; <code class="language-plaintext highlighter-rouge">gcc -fno-stack-protector -z execstack -no-pie quotes.c -o quotes</code></p>

<p><img src="/musubi/assets/aqua/26.png" alt="26" /></p>

<p>Then give sudo privilege to non root user to execute the binary and start debugging.</p>

<p><img src="/musubi/assets/aqua/27.png" alt="27" /></p>

<p>You can use anything you want for the exploit development but in this writeup, I will be using <a href="https://github.com/longld/peda">peda</a>.</p>

<p>Open the binary in gdb by running <code class="language-plaintext highlighter-rouge">sudo gdb -q /root/quotes</code> .</p>

<p><img src="/musubi/assets/aqua/28.png" alt="28" /></p>

<p>Disassemble the main program using <code class="language-plaintext highlighter-rouge">disas main</code> .</p>

<p><img src="/musubi/assets/aqua/29.1.png" alt="29.1" /></p>

<p><img src="/musubi/assets/aqua/29.2.png" alt="29.2" /></p>

<p>Disassemble the getname function using <code class="language-plaintext highlighter-rouge">disas getname</code> and we can see that the method <strong>strcpy</strong> is being called.</p>

<p><img src="/musubi/assets/aqua/30.png" alt="30" /></p>

<p>Let‚Äôs try to overflow the program by running <code class="language-plaintext highlighter-rouge">r $(python -c 'import sys;sys.stdout.write("A"*100)')</code> which will print out 100 A‚Äôs and will be parsed to the program as our <strong>name</strong> variable.</p>

<p><img src="/musubi/assets/aqua/31.png" alt="31" /></p>

<p>It seems like we managed to overwrite the <strong>EIP</strong>. To find the <strong>offset</strong> of the <strong>EIP</strong>, we need to use a pattern of unique strings. Since peda has this functionality, we can use them.</p>

<p>Create a pattern of 100 characters by running <code class="language-plaintext highlighter-rouge">pattern_create 100 pat</code> . This will store the pattern in a file called <strong>pat</strong>.</p>

<p><img src="/musubi/assets/aqua/32.png" alt="32" /></p>

<p>Rerun the program and parse the <strong>pattern</strong> as the name argument.</p>

<p><img src="/musubi/assets/aqua/33.png" alt="33" /></p>

<p><img src="/musubi/assets/aqua/33.2.png" alt="33.2" /></p>

<p>Using <strong>pattern_search</strong> command in peda. We will find the offset of the EIP which is at <strong>44</strong>.</p>

<p><img src="/musubi/assets/aqua/34.png" alt="34" /></p>

<p>Our exploit should be like this :</p>

<p><strong>A*44 + [EIP] + padding + shellcode</strong></p>

<p>Now, to verify if we have the right offset. We need to change our buffer.</p>

<p><code class="language-plaintext highlighter-rouge">gdb-peda$ r $(python -c 'import sys;sys.Stdout.write(("A"*44) + ("B"*4) + ("\x90"*32) + ("C"*23))')</code></p>

<p><img src="/musubi/assets/aqua/35.png" alt="35" /></p>

<p>For padding, we will add <strong>32 bytes of NOPs</strong> (no-operation opcode) so that it will do nothing and keep sliding to the next opcode until it reaches our shellcode. This is normally called as <strong>NOPsleds</strong> or <strong>NOP slides</strong>.</p>

<p><img src="/musubi/assets/aqua/36.png" alt="36" /></p>

<p>As we can see below, after the execution of the <strong>EIP</strong>, our <strong>NOPs</strong> are on top of the stack where <strong>ESP</strong> points to. Based on the disassembled <strong>getname</strong> method earlier, the last instruction is <strong>ret</strong>.</p>

<p><img src="/musubi/assets/aqua/ret.png" alt="ret" /></p>

<p>So if all is good, once <strong>ret</strong> is executed, the opcodes inside the address that is pointed by <strong>EIP</strong> will be executed, which is our <strong>NOPsleds</strong>. So, we need to put the address where our <strong>NOPsleds</strong> is located into our user controlled <strong>EIP</strong>.</p>

<p>So let‚Äôs put a breakpoint at the <strong>ret</strong> instruction and look at the stack at the moment of the execution.</p>

<p><img src="/musubi/assets/aqua/37.png" alt="37" /></p>

<p><img src="/musubi/assets/aqua/37.2.png" alt="37.2" /></p>

<p>Boom! We hit our first breakpoint!</p>

<p>Now, we can replace our Cs after the padding with the real shellcode. This is the <a href="http://shell-storm.org/shellcode/files/shellcode-827.php">shellcode</a> that we will be using. You also can use another shellcode which may spawn a reverse shell or anything else.</p>

<p>Rerun the program with modified payload and put a breakpoint at the end of the <code class="language-plaintext highlighter-rouge">getname</code> method.</p>

<p><img src="/musubi/assets/aqua/38.png" alt="38" /></p>

<p>Once we hit our breakpoint, run <code class="language-plaintext highlighter-rouge">c</code> to continue the execution.</p>

<p><img src="/musubi/assets/aqua/39.png" alt="39" /></p>

<p>So far so good, now run the binary outside gdb and put in our payload.</p>

<p><img src="/musubi/assets/aqua/40.png" alt="40" /></p>

<p>We managed to get a root shell in our debugging machine.</p>

<p>Now time for the tricky part. The <strong>ESP</strong> of our debugging machine and the target machine is not exactly the same at the moment. This means we need to modify our <strong>EIP</strong> address little by litte until it hits the right place. (It‚Äôs like playing jackpot, but better.)</p>

<h3 id="debugging-machine-esp-address-0xbffffbe0--address-a">Debugging machine ESP address: 0xbffffbe0 ‚Äì&gt; Address A</h3>
<h3 id="debugging-machine-eip-address-0xbffff330--address-i">Debugging machine EIP address: 0xbffff330 ‚Äì&gt; Address I</h3>

<h3 id="aqua-machine-esp-address-0xbffffc30--address-b">Aqua machine ESP address: 0xbffffc30 ‚Äì&gt; Address B</h3>
<h3 id="aqua-machine-eip-address---address-ii">Aqua machine EIP address: ? ‚Äì&gt; Address II</h3>

<p><img src="/musubi/assets/aqua/41.png" alt="41" /></p>

<p>We can see that the <strong>B &gt; A</strong> , means it is possible that <strong>II &gt; I</strong> .We will run our original payload first to see the outcome.</p>

<p><img src="/musubi/assets/aqua/42.png" alt="42" /></p>

<p>We will slowly increment <strong>Address I</strong> by <strong>10h</strong> and wait for the magic to happen.</p>

<p><img src="/musubi/assets/aqua/43.png" alt="43" /></p>

<p>And here we are. We got a shell! And a beautiful ascii art of <strong>Megumin</strong>.</p>

<p><img src="/musubi/assets/aqua/44.png" alt="44" /></p>

<p>Thank you for playing with my machine and do tell <a href="https://twitter.com/yunaranyancat">me</a> what should I improve on next time. Constructive criticisms are greatly appreciated. But pls don‚Äôt attack me too much. I‚Äôm scared. <strong>&gt;w&lt;</strong></p>

<p><img src="/musubi/assets/aqua/bang.gif" alt="bang" /></p>
:ET