I"In<p>It is time to play with the most simplest form of binary exploitation, <strong>vanilla EIP overwrite buffer overflow with no stack protection</strong>.</p>

<p><img src="/musubi/assets/binary0x01/muchhax.jpg" alt="muchhax" /></p>

<p>So, let’s start with the basic : What is buffer overflow?</p>

<p><img src="/musubi/assets/binary0x01/buffer-overflow.png" alt="bo" /></p>

<p>Normally, to trigger this vulnerability, a huge amount of input is inserted which leads the program to be unable to process the input properly.</p>

<p>For example , in this case, let’s say there is a program which accepts an input from the user, for example a program that simply asks a name from the user then prints it out back.</p>

<p>So the program flow would be like this.</p>

<p><code class="language-plaintext highlighter-rouge">Execute program -&gt; ask input -&gt; process input -&gt; print out input</code></p>

<p>Let’s assume that the program can only handles a name which has around <strong>30</strong> letters, which is, quite unusual for a normal people to have a name which is longer than that, or even that long.</p>

<p>However, if a user inserts a string which has a length longer than <strong>30</strong>, this can lead the program to crash (as the input may have overwritten something somewhere inside the memory of the program).</p>

<p>Since the memory is overwritten by user controlled input, especially the <strong>EIP</strong>, this can lead to remote code execution based on the input given by the user (which is the shellcode).</p>

<p>Now, it’s time to prove our theory…</p>

<p>In this demonstration, we will be using ;</p>

<ul>
  <li><strong>Windows XP SP3 32 bits</strong></li>
  <li><strong>FreeFloat FTP 1.0</strong></li>
</ul>

<p><img src="/musubi/assets/binary0x01/1.png" alt="1" /></p>

<ul>
  <li><strong>Immunity Debugger + Mona.py</strong></li>
  <li><strong>Kali Linux for developing the exploit</strong></li>
</ul>

<p><br />
<br /></p>

<p>Now, start the <strong>FTP Server</strong> and attach it on <strong>Immunity Debugger</strong>. In <strong>Immunity Debugger</strong>, go to <strong>File</strong> -&gt; <strong>Attach</strong> then look for the name of the application. Once attached, the application will be paused automatically, to resume, click on the play button or <strong>F9</strong>.</p>

<p><img src="/musubi/assets/binary0x01/4.0.png" alt="4.0" /></p>

<p><img src="/musubi/assets/binary0x01/4.png" alt="4" /></p>

<p>Please ensure that the target FTP server is reachable by the attacking machine (Kali) . Normally, user <code class="language-plaintext highlighter-rouge">anonymous</code> with password <code class="language-plaintext highlighter-rouge">anonymous</code> exists by default in the application.</p>

<p><img src="/musubi/assets/binary0x01/2.png" alt="2" /></p>

<p>By typing <code class="language-plaintext highlighter-rouge">?</code> , there is a lot of commands that can be tested for this vulnerability. So, let’s take <code class="language-plaintext highlighter-rouge">DIR</code> command for example. Let’s craft our skeleton exploit code first.</p>

<p><img src="/musubi/assets/binary0x01/3.png" alt="3" /></p>

<p>Now, we are ready to have fun.;)</p>

<p>To perform this attack efficiently, we will follow these steps;</p>

<ol>
  <li>Fuzz the application (insert various length of payloads until the program crashes and overwrites the <strong>EIP</strong>)</li>
  <li>Find the offset of the <strong>EIP</strong> (we need to find the exact location of the <strong>EIP</strong> before the overwrite, so we can get control of the <strong>EIP</strong>)</li>
  <li>Replace the <strong>EIP</strong> with something meaningful (something that can lead to our crafted shellcode, for example <strong>JMP ESP</strong>)</li>
  <li>Find bad characters (bad characters, as the name implies, are hex values that can corrupt our exploit code. We will see an example later..)</li>
  <li>Craft shellcode (msfvenom bla bla bla…)</li>
  <li>Add few NOPsleds before the shellcode (I’ll tell you why later..)</li>
</ol>

<p><br /><br /></p>

<h2 id="1--fuzzing-the-application">1 . Fuzzing the application</h2>

<p>For now, we will only be using manual fuzzing, which means, we will put different length of strings of <strong>As</strong> (\x41) in the payload until we managed to make it crash and overwrite something in the memory of the program, in this case, the <strong>EIP</strong>. Upon experimenting with various amount of payload, we will find that one of the suitable amount of payload is <strong>1000</strong> buffer of <strong>As</strong>.</p>

<p>Thus, our payload will look like this.</p>

<p><img src="/musubi/assets/binary0x01/5.png" alt="5" /></p>

<p>When we execute our exploit code, we will get this message in the debugger.</p>

<p><img src="/musubi/assets/binary0x01/6.png" alt="6" /></p>

<p>We can see in the debugger, our <strong>EIP</strong> has been overwritten.</p>

<h2 id="2-finding-the-eip-offset">2. Finding the EIP offset</h2>

<p>Okay, we managed to overwrite our <strong>EIP</strong> with our bunch of sent <strong>As</strong>. Now what? We need to find the exact location (offset) of the <strong>EIP</strong>, so that we can modify our <strong>As</strong> into something more interesting. Normally, to find the offset, we need to craft a list of unique strings which has a length of <strong>1000</strong> (in this case). Luckily, kali has a tool specifically for this kind of job.</p>

<p>Simply run in kali,</p>

<p><code class="language-plaintext highlighter-rouge">msf-pattern_create -l 1000</code></p>

<p><img src="/musubi/assets/binary0x01/7.png" alt="7" /></p>

<p>Replace the 1000 As in our payload with the crafted pattern.</p>

<p><img src="/musubi/assets/binary0x01/8.png" alt="8" /></p>

<p>Close the debugger, restart the application, reattach and resume the application. Run the exploit code with the crafted pattern as the payload. We will get something like this.</p>

<p><img src="/musubi/assets/binary0x01/9.png" alt="9" /></p>

<p>Now, the <strong>EIP</strong> is overwritten with <code class="language-plaintext highlighter-rouge">69413269</code> . Using <code class="language-plaintext highlighter-rouge">msf-pattern_offset</code> in kali, we will know the position of the <strong>EIP</strong> in our buffer.</p>

<p><code class="language-plaintext highlighter-rouge">msf-pattern_offset -l 1000 -q 69413269</code></p>

<p><img src="/musubi/assets/binary0x01/10.png" alt="10" /></p>

<p>The <strong>EIP</strong> is overwritten after <strong>247 As</strong>.</p>

<p>To ensure if this is correct, we will modify a bit our payload into something like this.</p>

<p><img src="/musubi/assets/binary0x01/11.png" alt="11" /></p>

<p>If the <strong>EIP</strong> is overwritten with <strong>4 Bs</strong> (\x42), this means that the offset is correct.</p>

<p><img src="/musubi/assets/binary0x01/12.png" alt="12" /></p>

<p>Yayy..</p>

<h2 id="3-replace-the-eip-with-something-meaningful">3. Replace the EIP with something meaningful</h2>

<p>Since we have conquered the <strong>EIP</strong>, now it is time to find a good location for our payload. Looking at the debugger, our remaining buffer after <strong>EIP</strong> are located at the address pointed by <strong>ESP</strong>.</p>

<p>Right click at the <strong>ESP</strong> and click <strong>Follow dump</strong> to check the content of the address pointed by the <strong>ESP</strong>.</p>

<p><img src="/musubi/assets/binary0x01/13.png" alt="13" /></p>

<p>Looking at the hex dump, it is shown that the address pointed by <strong>ESP</strong> starts at the <strong>9th Cs</strong> sent by our buffer. This means that, we need to add 8 bytes after <strong>EIP</strong> before we can put our shellcode. Or else, the <strong>ESP</strong> will not point to the start of our shellcode.</p>

<p><img src="/musubi/assets/binary0x01/14.png" alt="14" /></p>

<p>Some modification to our exploit code based on the explanation above.</p>

<p><img src="/musubi/assets/binary0x01/15.png" alt="15" /></p>

<p>Close the debugger, restart the application, reattach and resume the application.</p>

<p><img src="/musubi/assets/binary0x01/16.png" alt="16" /></p>

<p>Okay, since we know that our remaining buffer after the <strong>EIP</strong> overwrite can be found in the <strong>ESP</strong>, we can replace our <strong>EIP</strong> with an address that contains <strong>JMP ESP</strong> instruction in the program modules so that after the <strong>EIP</strong> has been executed, our shellcode will be executed after that. Something like,</p>

<p><code class="language-plaintext highlighter-rouge">buffer ---&gt; EIP [jmp esp] ---&gt; ESP [shellcode]</code></p>

<p>This is where mona is useful. For mona, we will need ;</p>

<ul>
  <li>List of modules the program is currently using</li>
  <li>List of addresses which contains <strong>JMP ESP</strong> instruction</li>
</ul>

<p>To find all of the modules, type</p>

<p>!mona modules</p>

<p><img src="/musubi/assets/binary0x01/17.png" alt="17" /></p>

<p>So, we will use <strong>SHELL32.dll</strong> for this demonstration. To find list of <strong>JMP ESP instruction</strong> addresses in the module, type</p>

<p><code class="language-plaintext highlighter-rouge">!mona find -s "\xff\xe4" -m SHELL32.dll</code></p>

<p><img src="/musubi/assets/binary0x01/18.png" alt="18" /></p>

<p>We will take the first address for now.. which is <strong>0x7cbd41fb</strong></p>

<p>Update our exploit code to look something like this.</p>

<p><img src="/musubi/assets/binary0x01/19.png" alt="19" /></p>

<h2 id="4-finding-bad-characters">4. Finding bad characters</h2>

<p>Bad characters are hex values that are not suitable for our shellcode. For example, <strong>\x00</strong> is a bad character because it serves as a <strong>NULL</strong> value or indicating the end of a string.</p>

<p>Note : Please be informed that our <strong>JMP ESP</strong> address also must not contain bad characters. So, we may need to change our <strong>JMP ESP</strong> address (0x7cbd41fb) later if it contains bad characters.</p>

<p>These are all possible hex values :</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"</span><span class="se">\x</span><span class="s2">01</span><span class="se">\x</span><span class="s2">02</span><span class="se">\x</span><span class="s2">03</span><span class="se">\x</span><span class="s2">04</span><span class="se">\x</span><span class="s2">05</span><span class="se">\x</span><span class="s2">06</span><span class="se">\x</span><span class="s2">07</span><span class="se">\x</span><span class="s2">08</span><span class="se">\x</span><span class="s2">09</span><span class="se">\x</span><span class="s2">0a</span><span class="se">\x</span><span class="s2">0b</span><span class="se">\x</span><span class="s2">0c</span><span class="se">\x</span><span class="s2">0d</span><span class="se">\x</span><span class="s2">0e</span><span class="se">\x</span><span class="s2">0f</span><span class="se">\x</span><span class="s2">10</span><span class="se">\x</span><span class="s2">11</span><span class="se">\x</span><span class="s2">12</span><span class="se">\x</span><span class="s2">13"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">14</span><span class="se">\x</span><span class="s2">15</span><span class="se">\x</span><span class="s2">16</span><span class="se">\x</span><span class="s2">17</span><span class="se">\x</span><span class="s2">18</span><span class="se">\x</span><span class="s2">19</span><span class="se">\x</span><span class="s2">1a</span><span class="se">\x</span><span class="s2">1b</span><span class="se">\x</span><span class="s2">1c</span><span class="se">\x</span><span class="s2">1d</span><span class="se">\x</span><span class="s2">1e</span><span class="se">\x</span><span class="s2">1f</span><span class="se">\x</span><span class="s2">20</span><span class="se">\x</span><span class="s2">21</span><span class="se">\x</span><span class="s2">22</span><span class="se">\x</span><span class="s2">23</span><span class="se">\x</span><span class="s2">24</span><span class="se">\x</span><span class="s2">25</span><span class="se">\x</span><span class="s2">26"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">27</span><span class="se">\x</span><span class="s2">28</span><span class="se">\x</span><span class="s2">29</span><span class="se">\x</span><span class="s2">2a</span><span class="se">\x</span><span class="s2">2b</span><span class="se">\x</span><span class="s2">2c</span><span class="se">\x</span><span class="s2">2d</span><span class="se">\x</span><span class="s2">2e</span><span class="se">\x</span><span class="s2">2f</span><span class="se">\x</span><span class="s2">30</span><span class="se">\x</span><span class="s2">31</span><span class="se">\x</span><span class="s2">32</span><span class="se">\x</span><span class="s2">33</span><span class="se">\x</span><span class="s2">34</span><span class="se">\x</span><span class="s2">35</span><span class="se">\x</span><span class="s2">36</span><span class="se">\x</span><span class="s2">37</span><span class="se">\x</span><span class="s2">38</span><span class="se">\x</span><span class="s2">39"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">3a</span><span class="se">\x</span><span class="s2">3b</span><span class="se">\x</span><span class="s2">3c</span><span class="se">\x</span><span class="s2">3d</span><span class="se">\x</span><span class="s2">3e</span><span class="se">\x</span><span class="s2">3f</span><span class="se">\x</span><span class="s2">40</span><span class="se">\x</span><span class="s2">41</span><span class="se">\x</span><span class="s2">42</span><span class="se">\x</span><span class="s2">43</span><span class="se">\x</span><span class="s2">44</span><span class="se">\x</span><span class="s2">45</span><span class="se">\x</span><span class="s2">46</span><span class="se">\x</span><span class="s2">47</span><span class="se">\x</span><span class="s2">48</span><span class="se">\x</span><span class="s2">49</span><span class="se">\x</span><span class="s2">4a</span><span class="se">\x</span><span class="s2">4b</span><span class="se">\x</span><span class="s2">4c"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">4d</span><span class="se">\x</span><span class="s2">4e</span><span class="se">\x</span><span class="s2">4f</span><span class="se">\x</span><span class="s2">50</span><span class="se">\x</span><span class="s2">51</span><span class="se">\x</span><span class="s2">52</span><span class="se">\x</span><span class="s2">53</span><span class="se">\x</span><span class="s2">54</span><span class="se">\x</span><span class="s2">55</span><span class="se">\x</span><span class="s2">56</span><span class="se">\x</span><span class="s2">57</span><span class="se">\x</span><span class="s2">58</span><span class="se">\x</span><span class="s2">59</span><span class="se">\x</span><span class="s2">5a</span><span class="se">\x</span><span class="s2">5b</span><span class="se">\x</span><span class="s2">5c</span><span class="se">\x</span><span class="s2">5d</span><span class="se">\x</span><span class="s2">5e</span><span class="se">\x</span><span class="s2">5f"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">60</span><span class="se">\x</span><span class="s2">61</span><span class="se">\x</span><span class="s2">62</span><span class="se">\x</span><span class="s2">63</span><span class="se">\x</span><span class="s2">64</span><span class="se">\x</span><span class="s2">65</span><span class="se">\x</span><span class="s2">66</span><span class="se">\x</span><span class="s2">67</span><span class="se">\x</span><span class="s2">68</span><span class="se">\x</span><span class="s2">69</span><span class="se">\x</span><span class="s2">6a</span><span class="se">\x</span><span class="s2">6b</span><span class="se">\x</span><span class="s2">6c</span><span class="se">\x</span><span class="s2">6d</span><span class="se">\x</span><span class="s2">6e</span><span class="se">\x</span><span class="s2">6f</span><span class="se">\x</span><span class="s2">70</span><span class="se">\x</span><span class="s2">71</span><span class="se">\x</span><span class="s2">72"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">73</span><span class="se">\x</span><span class="s2">74</span><span class="se">\x</span><span class="s2">75</span><span class="se">\x</span><span class="s2">76</span><span class="se">\x</span><span class="s2">77</span><span class="se">\x</span><span class="s2">78</span><span class="se">\x</span><span class="s2">79</span><span class="se">\x</span><span class="s2">7a</span><span class="se">\x</span><span class="s2">7b</span><span class="se">\x</span><span class="s2">7c</span><span class="se">\x</span><span class="s2">7d</span><span class="se">\x</span><span class="s2">7e</span><span class="se">\x</span><span class="s2">7f</span><span class="se">\x</span><span class="s2">80</span><span class="se">\x</span><span class="s2">81</span><span class="se">\x</span><span class="s2">82</span><span class="se">\x</span><span class="s2">83</span><span class="se">\x</span><span class="s2">84</span><span class="se">\x</span><span class="s2">85"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">86</span><span class="se">\x</span><span class="s2">87</span><span class="se">\x</span><span class="s2">88</span><span class="se">\x</span><span class="s2">89</span><span class="se">\x</span><span class="s2">8a</span><span class="se">\x</span><span class="s2">8b</span><span class="se">\x</span><span class="s2">8c</span><span class="se">\x</span><span class="s2">8d</span><span class="se">\x</span><span class="s2">8e</span><span class="se">\x</span><span class="s2">8f</span><span class="se">\x</span><span class="s2">90</span><span class="se">\x</span><span class="s2">91</span><span class="se">\x</span><span class="s2">92</span><span class="se">\x</span><span class="s2">93</span><span class="se">\x</span><span class="s2">94</span><span class="se">\x</span><span class="s2">95</span><span class="se">\x</span><span class="s2">96</span><span class="se">\x</span><span class="s2">97</span><span class="se">\x</span><span class="s2">98"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">99</span><span class="se">\x</span><span class="s2">9a</span><span class="se">\x</span><span class="s2">9b</span><span class="se">\x</span><span class="s2">9c</span><span class="se">\x</span><span class="s2">9d</span><span class="se">\x</span><span class="s2">9e</span><span class="se">\x</span><span class="s2">9f</span><span class="se">\x</span><span class="s2">a0</span><span class="se">\x</span><span class="s2">a1</span><span class="se">\x</span><span class="s2">a2</span><span class="se">\x</span><span class="s2">a3</span><span class="se">\x</span><span class="s2">a4</span><span class="se">\x</span><span class="s2">a5</span><span class="se">\x</span><span class="s2">a6</span><span class="se">\x</span><span class="s2">a7</span><span class="se">\x</span><span class="s2">a8</span><span class="se">\x</span><span class="s2">a9</span><span class="se">\x</span><span class="s2">aa</span><span class="se">\x</span><span class="s2">ab"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">ac</span><span class="se">\x</span><span class="s2">ad</span><span class="se">\x</span><span class="s2">ae</span><span class="se">\x</span><span class="s2">af</span><span class="se">\x</span><span class="s2">b0</span><span class="se">\x</span><span class="s2">b1</span><span class="se">\x</span><span class="s2">b2</span><span class="se">\x</span><span class="s2">b3</span><span class="se">\x</span><span class="s2">b4</span><span class="se">\x</span><span class="s2">b5</span><span class="se">\x</span><span class="s2">b6</span><span class="se">\x</span><span class="s2">b7</span><span class="se">\x</span><span class="s2">b8</span><span class="se">\x</span><span class="s2">b9</span><span class="se">\x</span><span class="s2">ba</span><span class="se">\x</span><span class="s2">bb</span><span class="se">\x</span><span class="s2">bc</span><span class="se">\x</span><span class="s2">bd</span><span class="se">\x</span><span class="s2">be"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">bf</span><span class="se">\x</span><span class="s2">c0</span><span class="se">\x</span><span class="s2">c1</span><span class="se">\x</span><span class="s2">c2</span><span class="se">\x</span><span class="s2">c3</span><span class="se">\x</span><span class="s2">c4</span><span class="se">\x</span><span class="s2">c5</span><span class="se">\x</span><span class="s2">c6</span><span class="se">\x</span><span class="s2">c7</span><span class="se">\x</span><span class="s2">c8</span><span class="se">\x</span><span class="s2">c9</span><span class="se">\x</span><span class="s2">ca</span><span class="se">\x</span><span class="s2">cb</span><span class="se">\x</span><span class="s2">cc</span><span class="se">\x</span><span class="s2">cd</span><span class="se">\x</span><span class="s2">ce</span><span class="se">\x</span><span class="s2">cf</span><span class="se">\x</span><span class="s2">d0</span><span class="se">\x</span><span class="s2">d1"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">d2</span><span class="se">\x</span><span class="s2">d3</span><span class="se">\x</span><span class="s2">d4</span><span class="se">\x</span><span class="s2">d5</span><span class="se">\x</span><span class="s2">d6</span><span class="se">\x</span><span class="s2">d7</span><span class="se">\x</span><span class="s2">d8</span><span class="se">\x</span><span class="s2">d9</span><span class="se">\x</span><span class="s2">da</span><span class="se">\x</span><span class="s2">db</span><span class="se">\x</span><span class="s2">dc</span><span class="se">\x</span><span class="s2">dd</span><span class="se">\x</span><span class="s2">de</span><span class="se">\x</span><span class="s2">df</span><span class="se">\x</span><span class="s2">e0</span><span class="se">\x</span><span class="s2">e1</span><span class="se">\x</span><span class="s2">e2</span><span class="se">\x</span><span class="s2">e3</span><span class="se">\x</span><span class="s2">e4"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">e5</span><span class="se">\x</span><span class="s2">e6</span><span class="se">\x</span><span class="s2">e7</span><span class="se">\x</span><span class="s2">e8</span><span class="se">\x</span><span class="s2">e9</span><span class="se">\x</span><span class="s2">ea</span><span class="se">\x</span><span class="s2">eb</span><span class="se">\x</span><span class="s2">ec</span><span class="se">\x</span><span class="s2">ed</span><span class="se">\x</span><span class="s2">ee</span><span class="se">\x</span><span class="s2">ef</span><span class="se">\x</span><span class="s2">f0</span><span class="se">\x</span><span class="s2">f1</span><span class="se">\x</span><span class="s2">f2</span><span class="se">\x</span><span class="s2">f3</span><span class="se">\x</span><span class="s2">f4</span><span class="se">\x</span><span class="s2">f5</span><span class="se">\x</span><span class="s2">f6</span><span class="se">\x</span><span class="s2">f7"</span>
<span class="s2">"</span><span class="se">\x</span><span class="s2">f8</span><span class="se">\x</span><span class="s2">f9</span><span class="se">\x</span><span class="s2">fa</span><span class="se">\x</span><span class="s2">fb</span><span class="se">\x</span><span class="s2">fc</span><span class="se">\x</span><span class="s2">fd</span><span class="se">\x</span><span class="s2">fe</span><span class="se">\x</span><span class="s2">ff</span><span class="se">\x</span><span class="s2">00"</span></code></pre></figure>

<p>Since <strong>\x00</strong> is a common bad char, we will remove it in advance and add the rest of the hex values into our payload.</p>

<p><img src="/musubi/assets/binary0x01/20.png" alt="20" /></p>

<p>Close the debugger, restart the application, reattach and resume the application. Run our modified exploit code. Right click on the <strong>ESP</strong> and go to follow dump and we will get something like this.</p>

<p><img src="/musubi/assets/binary0x01/21.png" alt="21" /></p>

<p>We can see all of the hex values in the dump. However, after <strong>\x09</strong> , <strong>\x0a</strong> is nowhere to be found. This indicates that <strong>\x0a</strong> is a possible bad character. We then add it into a list of bad chars.</p>

<p>Update our exploit code and repeat the step to find bad chars until no more bad chars left.</p>

<p><img src="/musubi/assets/binary0x01/22.png" alt="22" /></p>

<p><img src="/musubi/assets/binary0x01/23.png" alt="23" /></p>

<p><img src="/musubi/assets/binary0x01/24.png" alt="24" /></p>

<p><img src="/musubi/assets/binary0x01/25.png" alt="25" /></p>

<p>We found out that the bad chars for our shellcode for this application is : <strong>\x00</strong> , <strong>\x0a</strong> , <strong>\x0d</strong></p>

<p>(p/s: we don’t need to change the value of our <strong>EIP</strong>)</p>

<p><img src="/musubi/assets/binary0x01/26.png" alt="26" /></p>

<p><img src="/musubi/assets/binary0x01/27.png" alt="27" /></p>

<h2 id="5-crafting-shellcode">5. Crafting shellcode</h2>

<p>In this case, we will be using <code class="language-plaintext highlighter-rouge">msfvenom</code> for our shellcode. Using below command, we can create a reverse shell shellcode which will not contains our bad chars.</p>

<p><img src="/musubi/assets/binary0x01/28.png" alt="28" /></p>

<p>Add our shellcode into our payload</p>

<p><img src="/musubi/assets/binary0x01/29.png" alt="29" /></p>

<h2 id="6-add-few-nopsleds-before-the-shellcode">6. Add few NOPsleds before the shellcode</h2>

<p>Okay, we have overwritten <strong>EIP</strong>, add some padding so we can reach our <strong>ESP</strong> buffer and then we place our shellcode. Then that’s all…, right?</p>

<p>But why we need to add <strong>NOPsleds</strong> before our shellcode? What are <strong>NOPsleds</strong> and what impact it can give to the effectiveness of our exploit?</p>

<p>Basically, a <strong>NOP</strong> is a no operation opcode, which means, it does nothing and move on to the next instruction (opcodes). <strong>NOPsleds</strong> or <strong>NOP slides</strong> is a series of NOPs which does nothing. However, these <strong>NOPsleds</strong> are crucial in the effectiveness of the execution of our shellcode.</p>

<p>Let’s compare both flows of buffer overflow exploit and the output when I tested both of them;</p>

<p><code class="language-plaintext highlighter-rouge">Buffer | EIP | padding before ESP | shellcode</code> <strong>–&gt; Exploit failed</strong></p>

<p><strong>VS</strong></p>

<p><code class="language-plaintext highlighter-rouge">Buffer | EIP | padding before ESP | nopsleds | shellcode</code> <strong>–&gt; Exploit succeeded</strong></p>

<p>The best explanation I can give is ;</p>

<p><strong>NOPsleds</strong> can increase the accuracy of the target address. So, if the program lands in the <strong>NOPsleds</strong> after the controlled <strong>EIP</strong>, it will continue doing nothing until it reaches the shellcode thus can reduce the risk of the shellcode to be overwritten / corrupted by the program instructions.</p>

<p>Now, open up our listener and then run our finished exploit code. (Get it on <a href="https://raw.githubusercontent.com/yunaranyancat/62-69-6e-61-72-79-20-65-78-70-6c-6f-69-74-61-74-69-6f-6e/master/FreeFloat%20FTP/dir.py">github</a>)</p>

<p><img src="/musubi/assets/binary0x01/finalexploit.gif" alt="end" /></p>

<h3 id="conclusion-">Conclusion :</h3>

<p>This is the easiest form of buffer overflow, if you are still wondering what is <strong>EIP</strong>, <strong>ESP</strong> , <strong>JMP ESP</strong> etc.. it’s best if you start searching about them online to get a good grasp on the concept demonstrated above.</p>

<p>Thanks and Happy New Year!</p>

<p><img src="/musubi/assets/binary0x01/newyear.gif" alt="ny" /></p>
:ET